Docker - автоматизированное развертывание приложений в виде переносных контейнеров, открытый исходный код

1. Работают в облаке и локально одинаково
2. Можно добавить в контейнер все что нужно для приложения (библиотеки, ...)
3. Среды для выполнения Windows контейнеров:
- Windows Server (изоляция процесса и пространства имён, просто у системе отделяется)
- Hyper-V (изоляция Windows Server контейнеров, запуск их в виртуальной машине)
4. Разница между контейнерами и виртуальными машинами: 
- виртуальная машина (для каждого приложения создаётся отдельно и система тоже)
- контейнер (для каждого приложения не создаётся система, приложение отделено прямо в системе каким-то сервисом например)
5. Dockerfile (код из инструкций, как создать образ) -> Image (готовое к запуску приложение, вместе с библиотеками, ...) -> Container (запуск образа)
6. Docker registry (docker hub) - реестр хранящих докер образов (как гитхаб, ток для докера)
2. Docker Community Edition (SE): винда и мак
Docker Enterprise Edition (EE): платная версия, для больших проектов в компаниях

Пример:

Docker file:
FROM ubuntu:20.04 (скачиваем убунту из docker hub)
RUN apt-get update
RUN apt-get -y install nginx (установка зависимостей и библиотек)
EXPOSE 80/tcp (открытие порта для сервера)
CMD ["/usr/sbin/nginx", "-g", "daemon off;"] (запуск сервера с командой строки при запуске контейнера)

docker build -t myapp./ (создание образа на основе docker file)
docker run -d -p 80:80 myapp (запуск приложения с контейнера)

docker pull nginx (достать приложение по названию)
docker run -d -t --name test nginx (запустить приложение/контейнер test из образа nginx)
docker ps (чекнуть все запущенные контейнеры)
docker exec -it test bash (если бы это была ubuntu, то можно было бы подключиться к системе)
docker stop test (остановить контейнер test)
docker start test (запустить уже созданный ранее контейнер с приложением)
docker stats (статистика ресурсов контейнеров)

Docker-compose.yml: 
version: "3.8"
services:
    web:
        build: .
        ports: 
            - "5000:5000" 

    redis:
        image: "redis:alpine"
        ports: 
            - "6379:6379"

docker-compose up (запуск сразу 2 контейнеров, которые описаны вверху в конф.файле)
docker-compose down (выключить контейнеры)

------------------------------------------------------------------------------------------------------------------------------

docker ps -a -> check containers, that runs
docker start <containver-id>
docker stop <container-id>
docker remove <container-id>

docker run --name psql-container -p 5432:5432 -e POSTGRES_PASSWORD=myPassword -d postgres -> install and run container
psql-container -> of.name for postgres container
