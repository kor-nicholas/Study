#include <iostream>
#include <string>

using namespace std;

int main()
{
	setlocale(LC_ALL, "rus");

	// ------------------------------------------------- Создание строк --------------------------------------------------------------------------------

	string str; // пустая строка
	string str1("Hello World!"); // строка Hello World! (char*)
	string str2(str1); // конструктор копирования -> строка str2 = str1 -> Hello World!

	getline(cin, str); // Ввод строки с клавиатуры (нужно очищать \n )
	cin.get(); // Скорее всего очищает от \n (но если делать в цикле -> будут ошибки)

	// ------------------------------------------------- Методы строк ----------------------------------------------------------------------------------

	str.length(); // Узнать количество символов (не считая \0)
	str.size(); // Узнать количество символов (не считая \0)

	str.at(2); // str[2] - узнать символ
	str[2];

	str.append(" - > Hello World!"); // Добавляет в конец

	// ------------------------------------------------- Replace ------------------------------------------------------------------------------------

	str.replace(); // Замена строки другой строкой

	string s1 = "abcdef";
	string s2 = "1234567890";

	s2.replace(2, 4, s1); // s2 = "12abcdef7890"
	s2 = "1234567890";
	s2.replace(3, 2, s1); // s2 = "123abcdef67890"
	s2 = "1234567890";
	s2.replace(5, 1, s1); // s2 = "12345abcdef7890"

	// замена символов, функция replace()
	string s1 = "abcdef";
	string s2 = "1234567890";

	s2 = "1234567890";
	s2.replace(5, 1, s1, 2, 3); // s2 = "12345cde7890"
	s2 = "1234567890";
	s2.replace(4, 2, s1, 0, 4); // s2 = "1234abcd7890"

	// ------------------------------------------------- Replace ------------------------------------------------------------------------------------

	str = str1 + str2; // Конкотенация строк

	str.assign(str2); // str = str2 - Присваивание
	str.swap(str2); // Меняет местами 2 строки (то же присваивание) -> str = str2

	str.capacity(); // Сколько символов на самом деле (size - ток какие введенные)

	str.max_size(); // Максимальный размер строки

	str.clear(); // Очищяет строку (как в начале - string str)

	str.compare(str2); // Сравнение строк (str с str2) -> 0 - если строки посимвольно равны ("Hello World!" = "Hello World!")
	// -> 1 - если вторая строка меньше за первую ("Hello World!" > "Aello World!")
	// -> -1 - если первая строка больше другой ("Hello World!" < "Zello World!")
	// Сравнение происходит по кодировке 

	str.empty(); // Пустая ли строка (пустая -> true; не пустая -> false)
	str.npos(); // Пустота ( while ( str != str.npos() ) ) - пока строка не пустая (походу аналог str.empty())

	str.push_back('d');

	str.erase(2); // Удаляет с 3 символа и до конца строки
	str.erase(2, 1); // Удаляет с 3 символа 1 символ (количество символов начиная с 3)

	str.find("l"); // Находит символ в строке и возвращает индекс -> 2 ; если нету такого елемента, то -> -1
	str.find_first_of("l"); // Находит ток первый раз когда встречается -> 2
	str.find_last_of("l"); // Находит с конца символ -> 3
	str.find_last_of("llo"); // Может найти комбинацию,но выведит откуда она начинается -> 4 (так же и с другими find, find_first_of)

	str.substr(2,3); // Выделяет под-строку из строки (из 3 символа выделит 3 шт символов) -> llo

	char* new_str = str1.c_str(); // делаем из string -> char*

	str.insert(2, str1, 1, 3); // Вставка строки в строку (2 - str[2]; str1 - строка которая вствляется; 1 - str1[1]; 3 - количество символов)

	string s1 = "abcdef";
	string s2 = "1234567890";

	s1.insert(3, s2); // s1 = "abc"+"1234567890"+"def"="abc1234567890def"
	s2.insert(2, s1, 1, 3); // s2 = "12bcd34567890"
	cout << str;

	// ------------------------------ Перевод из string в int и наоборот ----------------------------------------------------------------------------
	int n = 123456;
	//Число -> строка
	ostringstream ost;
	ost << n;
	string s_num = ost.str();
	cout << s_num << endl;

	// to_string() - перевод из любого (int,double,float,long,unsigned) в string 
	to_string(n);

	n = 0;
	//Строка -> число
	istringstream ist(s_num);
	ist >> n;
	cout << n << endl;
	// ----------------------------------------------------------------------------------------------------------------------------------------------

	string::iterator; // Класс string имеет свои итераторы

	return 0;
}