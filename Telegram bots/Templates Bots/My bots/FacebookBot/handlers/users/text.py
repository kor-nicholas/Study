from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from loader import dp

from aiogram.dispatcher import FSMContext
from states.state import Input

from keyboards.default.menu import back, main, shop_markup, back_shop

from sql.sql_db import SQL_product, SQL_shop
from data.config import db_sql

@dp.message_handler()
async def echo(message: types.Message):
    if message.text == "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üîΩ":
        sql_object = SQL_product(db_sql)
        await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏", reply_markup=back)
        for product in sql_object.sql_select_all():
            # product[0] - id ; product[1] - name ; product[2] - description ; product[3] - prise ; product[4] - photo_id ;
            #product[5] - count
            buy = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('-', callback_data=f'{product[0]}-1'),
                    InlineKeyboardButton('1', callback_data='count'),
                    InlineKeyboardButton('+', callback_data=f'{product[0]}+1')
                ],
                [
                    InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'{product[0]}|1')
                ]
            ])

            await message.answer_photo(caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{product[2]}\n\n–¶–µ–Ω–∞: {product[3]}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[5]}", photo=product[4], reply_markup=buy)
        sql_object.sql_close()

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=ReplyKeyboardRemove())
        await Input.delete.set()

    elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É üßπ":
        sql_object = SQL_shop(db_sql)

        sql_object.sql_delete_all(message.chat.id)
        sql_object.sql_close()

        await message.delete()
        await message.chat.delete_message(message.message_id - 1)
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=back_shop)

    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer(f"–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.full_name}!\n"
                             f"–ù—É —á—Ç–æ ? –ß—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª ? –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å üëá",
                             reply_markup=main)

    elif message.text == "–ö–æ—Ä–∑–∏–Ω–∞ üõí" or "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É":
        sql_object = SQL_shop(db_sql)

        shops = sql_object.sql_select_all_for_telegram_id(message.chat.id)

        total = 0

        text_shop = "–í –∫–æ—Ä–∑–∏–Ω–µ : \n\n"
        for shop in shops:
            # shop[0] - id ; shop[1] - telegram_id ; shop[2] - name ; shop[3] - prise ; shop[4] - count ; shop[5] - total
            text_shop += f"{shop[0]}. {shop[2]} x {shop[4]} = {shop[5]}–≥—Ä–Ω\n"
            total += int(shop[5])

        sql_object.sql_close()

        text_shop += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ : {total}–≥—Ä–Ω"
        await message.answer(text_shop, reply_markup=shop_markup)

        button_buy_link = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url="privatbank.com", callback_data=f"{message.chat.id}link")
            ]
        ])
        await message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏—Ç—å üëá", reply_markup=button_buy_link)

        confirm = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton('–Ø –æ–ø–ª–∞—Ç–∏–ª ‚úÖ', callback_data=f'{message.chat.id}confirm?')
            ]
        ])
        await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ø –æ–ø–ª–∞—Ç–∏–ª üëá", reply_markup=confirm)

@dp.message_handler(state=Input.delete)
async def delete_for_id_shop(message: types.Message, state: FSMContext):
    sql_object = SQL_shop(db_sql)

    print(f"{message.text} | {message.chat.id}")
    sql_object.sql_delete_for_id(message.text, message.chat.id) #id –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª —á–µ–ª–æ–≤–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ id
    sql_object.sql_close()

    await state.finish()

    await message.chat.delete_message(message.message_id - 3)
    await message.chat.delete_message(message.message_id - 2)
    await message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", reply_markup=back_shop)

