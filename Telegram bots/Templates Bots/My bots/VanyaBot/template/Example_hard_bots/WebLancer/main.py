import datetime
import random

import telebot
from telebot import *
from telebot import types

import config
import db
import func
import menu

dictKunaEvent = {}


def start_bot():
    print(
        f'\n----------------------------------------------\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!!!\n –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}\n')
    product_dict = {}
    db.db()
    bot = telebot.TeleBot(config.BOT_TOKEN)
    print(bot.get_me())

    @bot.message_handler(commands=['start'])
    def handler_start(message):

        chat_id = message.chat.id
        name = message.from_user.username
        ref_code = message.text[7:]
        func.first_start(chat_id, name, ref_code)
        if func.is_kur(message.chat.id):
            bot.send_message(chat_id=chat_id,
                             text=f'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üë§ –ë—Ä–∞—Ç–∏—à–∫–∞ {name}!\nüëª –¢–æ–ª—å–∫–æ —É –Ω–∞—Å —Å–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ñ—Ñ.\nüî¥ –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª –±–æ—Ç–∞ \n‚ôªÔ∏è –ò –Ω–µ –ø–æ–ø–∞–¥–∞–π—Å—è –Ω–∞ —Å–∫–∞–º.',
                             reply_markup=menu.kur_main_menu)
        elif func.is_adm(message.chat.id):
            bot.send_message(chat_id=chat_id,
                             text=f'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üë§ –ë—Ä–∞—Ç–∏—à–∫–∞ {name}!\nüëª –¢–æ–ª—å–∫–æ —É –Ω–∞—Å —Å–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ñ—Ñ.\nüî¥ –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª –±–æ—Ç–∞ \n‚ôªÔ∏è –ò –Ω–µ –ø–æ–ø–∞–¥–∞–π—Å—è –Ω–∞ —Å–∫–∞–º.',
                             reply_markup=menu.adm_main_menu)
        else:
            bot.send_message(chat_id=chat_id,
                             text=f'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üë§ –ë—Ä–∞—Ç–∏—à–∫–∞ {name}!\nüëª –¢–æ–ª—å–∫–æ —É –Ω–∞—Å —Å–∞–º—ã–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ñ—Ñ.\nüî¥ –ò—Å–ø–æ–ª—å–∑—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª –±–æ—Ç–∞ \n‚ôªÔ∏è –ò –Ω–µ –ø–æ–ø–∞–¥–∞–π—Å—è –Ω–∞ —Å–∫–∞–º.',
                             reply_markup=menu.main_menu)

    @bot.message_handler(commands=['adm', 'admmenu', 'adm_menu'])
    def wrapper(message):
        if func.is_adm(message.chat.id):
            bot.send_message(chat_id=message.chat.id, text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ADMIN', reply_markup=menu.adm_menu)

    @bot.message_handler(commands=['kur', 'kurmenu', 'kur_menu'])
    def wrapper(message):
        if func.is_kur(message.chat.id):
            bot.send_message(chat_id=message.chat.id, text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ö—É—Ä—å–µ—Ä', reply_markup=menu.kur_menu)

    @bot.message_handler(content_types=['text'])
    def text_wrapper(message):
        if message.text == '1':
            conn, cursor = db.connect()

            for i in "qwerty":
                last = cursor.execute('select max(person_id) from address').fetchone()[0]
                cursor.execute('insert into address values(?,1,?)', (i, last + 1,))
                conn.commit()
            cursor.close()
            conn.close()
        elif message.text == 'adm':
            if func.is_adm(message.chat.id):
                bot.send_message(chat_id=message.chat.id, text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ADMIN', reply_markup=menu.adm_menu)
        elif message.text == 'kur':
            if func.is_kur(message.chat.id):
                bot.send_message(chat_id=message.chat.id, text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ö—É—Ä—å–µ—Ä', reply_markup=menu.kur_menu)

        if dictKunaEvent[message.chat.id] == "sending_code":
            chat_id = message.chat.id
            code = message.text
            dictKunaEvent[message.chat.id] = ""
            check = func.check_kuna_code(code)
            if check[0] == 1:
                func.add_balance(chat_id, check[1])
                bot.send_message(chat_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {} UAH'.format(check[1]),
                                 reply_markup=menu.main_menu)
                func.write_to_adm(chat_id, check[1])
            else:
                bot.send_message(chat_id, f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!', reply_markup=menu.main_menu)

    @bot.callback_query_handler(func=lambda call: True)
    def handler_call(call):
        message_id = call.message.message_id
        chat_id = call.message.chat.id

        if call.data == 'profile':
            user = func.get_user(chat_id)
            pokupki = '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞...'
            if len(db.get_values('*', 'user_id', chat_id, base='purchases')) > 0:
                pokupki = '\n'
                for i in db.get_values('*', 'user_id', chat_id, base='purchases'):
                    pokupki = pokupki + i[1][:19] + ' - ' + i[2] + '\n'
            try:
                if func.is_adm(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"""
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§µ<b>–õ–æ–≥–∏–Ω:</b> @{user[1]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user[2][:19]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üí∞–í–∞—à –±–∞–ª–∞–Ω—Å</b> = {float(user[5]):.2f} {db.get_value('money_value')}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üëú–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b> {pokupki}""", reply_markup=menu.adm_main_menu, parse_mode='HTML')
                elif func.is_kur(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"""
                ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§µ<b>–õ–æ–≥–∏–Ω:</b> @{user[1]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user[2][:19]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üí∞–í–∞—à –±–∞–ª–∞–Ω—Å</b> = {float(user[5]):.2f} {db.get_value('money_value')}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üëú–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b> {pokupki}""", reply_markup=menu.kur_main_menu, parse_mode='HTML')
                else:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"""
                \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nü§µ<b>–õ–æ–≥–∏–Ω:</b> @{user[1]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>‚è≥–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user[2][:19]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üí∞–í–∞—à –±–∞–ª–∞–Ω—Å</b> = {float(user[5]):.2f} {db.get_value('money_value')}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>üëú–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b> {pokupki}""", reply_markup=menu.main_menu, parse_mode='HTML')

            except Exception as e:
                print(e)
        if call.data == 'info':
            try:
                if func.is_adm(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=db.get_value('info_message'),
                                          reply_markup=menu.adm_main_menu)
                elif func.is_kur(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=db.get_value('info_message'),
                                          reply_markup=menu.kur_main_menu)
                else:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=db.get_value('info_message'),
                                          reply_markup=menu.main_menu)
            except:
                pass
        if call.data == 'stat':
            user = func.get_user(chat_id)
            now = datetime.now()
            month_count = db.get_valuedata(
                "select count(*) from purchases where date like '" + now.strftime("%Y-%m") + "%'")
            day_count = db.get_valuedata(
                "select count(*) from purchases where date like '" + now.strftime("%Y-%m-%d") + "%'")
            week_count = db.get_valuedata(db.getLastWeekCount())
            user_count = db.get_value(text='count(*)', base='users')
            kur_count = db.get_value(text='count(*)', base='kur_id')
            adm_count = db.get_value(text='count(*)', base='adm_id')
            sell_count = db.get_value(text='count(*)', base='purchases')
            adress_count = db.get_value(text='count(*)', base='address')
            oplata_count = db.get_value(text='count(*)', base='check_id')
            activcat_count = db.get_value(text='count(*)', base='catalog')
            try:
                if func.is_adm(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"""
                		\n\n‚ûñ‚ûñ‚ûñ‚ûñüü¢<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>üü¢‚ûñ‚ûñ‚ûñ‚ûñ
                		\n‚ûñü§µ<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ =</b> {user_count}\
                		\n‚ûñ<b>‚≠ïÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ =</b> {adm_count}\
                		\n‚ûñ<b>üì≠–ö—É—Ä—å–µ—Ä–æ–≤ =</b> {kur_count}\
                		\n\n‚ûñ‚ûñ‚ûñ‚ûñüü¢<b>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è</b>üü¢‚ûñ‚ûñ‚ûñ‚ûñ
                		\n‚ûñ<b>üéÅ–¢–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ =</b> {adress_count}\
                		\n‚ûñ<b>‚úÖ–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂ =</b> {sell_count}\
                		\n‚ûñ<b>‚úÖ–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –¥–µ–Ω—å =</b> {day_count}\
                		\n‚ûñ<b>‚úÖ–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –Ω–µ–¥–µ–ª—é =</b> {week_count}\
                		\n‚ûñ<b>‚úÖ–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü =</b> {month_count}\
                		\n‚ûñ<b>üíµ–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b> = {oplata_count}\
                		\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                		\n‚ûñ<b>‚úÖ–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π =</b> {activcat_count}\
                		\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ""", reply_markup=menu.adm_main_menu, parse_mode='HTML')
                elif func.is_kur(chat_id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f"""
                		\n\n‚ûñ‚ûñ‚ûñ‚ûñüü¢<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>üü¢‚ûñ‚ûñ‚ûñ‚ûñ
                		\n‚ûñü§µ<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ =</b> {user_count}\
                		\n‚ûñ<b>‚≠ïÔ∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ =</b> {adm_count}\
                		\n‚ûñ<b>üì≠–ö—É—Ä—å–µ—Ä–æ–≤ =</b> {kur_count}\
                		\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                		\n‚ûñ<b>üéÅ–¢–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ =</b> {adress_count}\
                		\n‚ûñ<b>‚úÖ–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π =</b> {activcat_count}\
                		\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ""", reply_markup=menu.kur_main_menu, parse_mode='HTML')
            except:
                pass

        if call.data == 'nal':
            user = func.get_user(chat_id)
            now = datetime.now()
            try:
                tovari = db.get_values_long(
                    "select p.name, count(a.product_id), p.product_id from address as a inner join product as p where a.product_id = p.product_id group by a.product_id")
                tvrstr = ""

                for tovar, kolichestvo, product_id in tovari:
                    tvrstr += f"{tovar} = {kolichestvo}\n"
                    nalichie = db.get_values_long(
                        f"select link, count(product_id) from address where product_id = {product_id} group by link")

                    for n, k in nalichie:
                        tvrstr += f"üìó {n} ({k})\n"

                    tvrstr += "\n"

                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                 text=f"üìí <b>–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n<b>{tvrstr}</b>",
                                 reply_markup=menu.adm_main_menu, parse_mode='HTML')
            except:
                pass


        if call.data == 'naluser':
            try:
                    tovari = db.get_values_long(
                        "select p.name, count(a.product_id) from address as a inner join product as p where a.product_id = p.product_id group by a.product_id")
                    tvrstr = ""

                    for tovar, kolichestvo in tovari:
                        tvrstr += f"üìó {tovar} = {kolichestvo}\n"

                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                     text=f"üìí <b>–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n<b>{tvrstr}</b>",
                                     reply_markup=menu.main_menu, parse_mode='HTML')
            except:
                pass


        if call.data == 'nalkur':
            try:
                    tovari = db.get_values_long(
                        "select p.name, count(a.product_id) from address as a inner join product as p where a.product_id = p.product_id group by a.product_id")
                    tvrstr = ""

                    for tovar, kolichestvo in tovari:
                        tvrstr += f"üìó {tovar} = {kolichestvo}\n"

                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                     text=f"üìí <b>–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n<b>{tvrstr}</b>",
                                     reply_markup=menu.kur_main_menu, parse_mode='HTML')
            except:
                pass


        if call.data == 'balance':
            if db.get_value('need_qiwi') == 1 or db.get_value('need_kuna') == 1 or db.get_value('need_ltc') == 1 or db.get_value('need_btc') == 1 or db.get_value('need_btc_c') == 1 or db.get_value('need_easypay') == 1 or db.get_value(
                    'need_global24') == 1 or db.get_value('need_promo') == 1:
                try:
                    bot.edit_message_text(chat_id=chat_id,
                                          message_id=message_id,
                                          text='üí≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ',
                                          reply_markup=menu.replenish_balance())
                except:
                    pass
            else:
                try:
                    bot.edit_message_text(chat_id=chat_id,
                                          message_id=message_id,
                                          text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...',
                                          reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu)
                except:
                    pass
        if call.data == 'exit_to_menu':
            bot.clear_step_handler(call.message)

            if func.is_adm(chat_id):
                try:
                    history_message = db.get_history_info(chat_id)
                    bot.delete_message(history_message[0], history_message[1])
                    db.delete_message_history(chat_id, history_message[1])
                except:
                    pass
                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                      text='<b>‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=menu.adm_main_menu,
                                      parse_mode='HTML')
            elif func.is_kur(chat_id):
                try:
                    history_message = db.get_history_info(chat_id)
                    bot.delete_message(history_message[0], history_message[1])
                    db.delete_message_history(chat_id, history_message[1])
                except:
                    pass
                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                      text='<b>‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=menu.kur_main_menu,
                                      parse_mode='HTML')
            else:
                try:
                    history_message = db.get_history_info(chat_id)
                    bot.delete_message(history_message[0], history_message[1])
                    db.delete_message_history(chat_id, history_message[1])
                except:
                    pass
                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                      text='<b>‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=menu.main_menu,
                                      parse_mode='HTML')

        if call.data == 'qiwi_money':
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=func.qiwi_money(chat_id),
                                      reply_markup=menu.qiwi_money)
            except:
                pass

        if call.data == 'kuna_code':
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=func.kuna_code(chat_id),
                                      reply_markup=menu.kuna_code)
                dictKunaEvent[chat_id] = "sending_code"
            except:
                pass

        # –õ–∞–π—Ç–∫–æ–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        if call.data == 'aperon_code':
            wallet = func.aperon_code(chat_id)
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=wallet[0])
                bot.send_message(chat_id=chat_id,
                                 text=wallet[1],
                                 reply_markup=menu.aperon_code)
                db.insert_message_history(chat_id, message_id)
            except:
                pass

        if call.data == 'check_aperon_money':
            check = func.check_aperon_money(chat_id)

            if check[0] == 1:
                func.add_balance(chat_id, check[1])
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)

        # –ë–∏—Ç–∫–æ–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        if call.data == 'BitCoin':
            wallet = func.bitcoin(chat_id)
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=wallet[0])
                bot.send_message(chat_id=chat_id,
                                 text=wallet[1],
                                 reply_markup=menu.bt—Å)
                db.insert_message_history(chat_id, message_id)
            except:
                pass

        # –ë–∏—Ç–∫–æ–∏–Ω –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        if call.data == 'check_bitcoin_payments_method':
            check = func.check_payment_bitcoin(chat_id)

            if check[0] == 1:
                func.add_balance(chat_id, check[1])
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)

        # –ë–∏—Ç–∫–æ–∏–Ω cash –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        if call.data == 'bitcoin_cash':
            wallet = func.bitcoin_cash(chat_id)
            try:
                bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=wallet[0])
                bot.send_message(chat_id=chat_id,
                                 text=wallet[1],
                                 reply_markup=menu.bitcoin_cash)
                db.insert_message_history(chat_id, message_id)
            except:
                pass

        # –ë–∏—Ç–∫–æ–∏–Ω cash –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        if call.data == 'check_bch_payments_method':
            check = func.check_payment_bitcoin_cash(chat_id)

            if check[0] == 1:
                func.add_balance(chat_id, check[1])
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)

        if call.data == 'check_qiwi_money':
            check = func.check_qiwi_money(chat_id)

            if check[0] == 1:
                func.add_balance(chat_id, check[1])
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)

        if call.data == 'easypay_money':
            try:
                msg = db.get_value('easypay_text').format(
                    number=random.choice(db.get_values('value', base='easypay')[0]))
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=msg,
                                      reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu)

                msg2 = bot.send_message(chat_id=chat_id,
                                        text="–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫\n–í–≤–µ–¥–∏—Ç–µ  ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞  '–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'\n–ü—Ä–∏–º–µ—Ä:   ( 892413078 1 )",
                                        reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg2, func.easypay_first)
            except:
                pass

        if call.data == 'global24_money':
            try:
                msg = db.get_value('global24_text').format(
                    number=random.choice(db.get_values('value', base='global24')[0]))
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=msg,
                                      reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu)

                msg2 = bot.send_message(chat_id=chat_id,
                                        text="–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫\n–í–≤–µ–¥–∏—Ç–µ  ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞  '–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª'\n–ü—Ä–∏–º–µ—Ä:   ( 892413078 1 )",
                                        reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg2, func.global24_first)
            except Exception as e:
                print(e)

        if call.data == 'easypay_check':
            check = func.easypay_check(chat_id)
            if check[0] == 1:
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
                func.add_balance(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)
        if call.data == 'global24_check':
            check = func.global24_check(chat_id)
            if check[0] == 1:
                func.print_good_payment(message_id, chat_id, call.id, check[1])
                func.write_to_adm(chat_id, check[1])
                func.add_balance(chat_id, check[1])
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          text=f'‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞!',
                                          show_alert=True)

        if call.data == 'promo':
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='üíé –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∞—É—á–µ—Ä–∞',
                                      reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu)
                msg = bot.send_message(chat_id, text='üíé –í–≤–µ–¥–∏—Ç–µ –≤–∞—É—á–µ—Ä:', reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.promo)
            except:
                pass

        if call.data == 'ref_system':
            ref_code = db.get_value('ref_code', 'user_id', chat_id, 'users')
            if str(ref_code) == str(chat_id):
                keyboard = menu.ref_system_standart
            else:
                keyboard = menu.ref_system
            try:
                msg = f"""üìà–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
                        \n<i>‚ùî–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–π—Å—è –∫ –±–æ—Ç—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ , –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</i><b> {db.get_value('referral_percent')}%</b>
                        \n<i>üí≤–í–∞—à –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</i> <b>{db.get_value('ref_earn', 'user_id', chat_id, 'users')} {db.get_value('money_value')}</b>\n\nüìã–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <b><a>https://t.me/{db.get_value('BOT_URL')}?start={db.get_value('ref_code', 'user_id', chat_id, 'users')}</a></b>"""
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=msg, reply_markup=keyboard,
                                      parse_mode='HTML')
            except:
                pass

        if call.data == 'change_ref_code':
            msg = bot.send_message(chat_id, text='‚úè –ö–∞–∫—É—é —Å—Å—ã–ª–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–µ—Ç—å? ', reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, func.change_ref_code)

        if call.data == 'drop_ref_code':
            try:
                code = db.get_value('ref_code', 'user_id', chat_id, 'users')
                db.set_ref_code(chat_id, code)
                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                      text='üü¢üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b> üîÑüü¢',
                                      reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu,
                                      parse_mode='HTML')
            except:
                pass

        if call.data == 'faq':
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                      text='üü¢‚ÅâÔ∏è <b>–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞</b> ‚ÅâÔ∏èüü¢',
                                      reply_markup=menu.faq, parse_mode='HTML')
            except:
                pass

        if call.data == 'help_easypay':
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text='üìí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ EasyPay\n1Ô∏è‚É£  –ù–∞–∂–º–∏—Ç–µ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n2Ô∏è‚É£  –ü–µ—Ä–µ–≤e–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω—É–∂–Ω—É—é –≤–∞–º —Å—É–º–º—É –Ω–∞ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫\n3Ô∏è‚É£  –ù–∞–∂–º–∏—Ç–µ –Ø –æ–ø–ª–∞—Ç–∏–ª\n4Ô∏è‚É£  –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ!\nhttps://ibb.co/Hd4pR9m',
                    reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu
                )
            except:
                pass

        if call.data == 'help_kunacode':
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text='üìí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ Kuna Code \n1Ô∏è‚É£ –ß–µ—Ä–µ–∑ –ª—é–±–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª EasyPay - –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é>> –≥—Ä–æ—à–æ–≤—ñ –ø–µ—Ä–µ–∫–∞–∑–∏\n>> –≤—ã–±–∏—Ä–∞–µ–º Kuna Code >> –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ >> \n –≤–Ω–æ—Å–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É + –∫–æ–º–∏—Å—Å–∏—é >> –ø–æ–ª—É—á–∞–µ–º —Å–º—Å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å Kuna –ö–æ–¥–æ–º –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–æ—Ç—É.\n2Ô∏è‚É£ –ß–µ—Ä–µ–∑ —Å–∞–π—Ç Kuna.io –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ(–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É) >> –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç >> –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ê–∫—Ç–∏–≤—ã \n>> –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ UAH –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å >> –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã >> –ù–∞–∂–∏–º–∞–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Kuna Code >> –ø–æ–ª—É—á–∞–µ—Ç–µ Kuna Code –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–æ—Ç—É.',
                    reply_markup=menu.adm_main_menu if func.is_adm(chat_id) else menu.main_menu
                )
            except:
                pass

        if call.data == 'shop':
            keyboard1 = types.InlineKeyboardMarkup(row_width=1)
            parent_catalog = db.get_values('*', 'catalog_id', 'parent_catalog_id', 'catalog')
            if len(parent_catalog) == 1:
                id = parent_catalog[0][0]
                catalog = db.get_values_long(
                    f'select * from catalog where parent_catalog_id={id} and catalog_id not in (select catalog_id from catalog where parent_catalog_id=catalog_id)')
                for i in catalog:
                    back = 'catalog' + str(i[0])
                    keyboard1.add(types.InlineKeyboardButton(text=i[1], callback_data=back))
            else:
                for i in parent_catalog:
                    back = "parent" + str(i[0])
                    keyboard1.add(types.InlineKeyboardButton(text=i[1], callback_data=back))
            try:
                keyboard1.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='exit_to_menu'))
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='üòä –í—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ–¥ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
                                      reply_markup=keyboard1)
            except Exception as e:
                print(e)

        if call.data in func.parent_list():
            id = call.data.replace('parent', '')
            keyboard2 = types.InlineKeyboardMarkup(row_width=1)

            ####################################################
            catalog = db.get_values_long(
                f'select * from catalog where parent_catalog_id={id} and catalog_id not in (select catalog_id from catalog where catalog_id=parent_catalog_id) '
                'and exists(select * from "product" WHERE product.catalog_id = catalog.catalog_id) = True'
            )
            for i in catalog:
                back = 'catalog' + str(i[0])
                keyboard2.add(types.InlineKeyboardButton(text=i[1], callback_data=back))
            try:
                keyboard2.add(types.InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='exit_to_menu'))
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='üè° –í—ã–±–∏—Ä–∞–π —Ä–∞–π–æ–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
                                      reply_markup=keyboard2)
            except Exception as e:
                print(e)

        if call.data in func.catalog_list():
            name = call.data.replace('catalog', '')

            keyboard3 = types.InlineKeyboardMarkup(row_width=1)
            id = db.get_value('catalog_id', 'catalog_id', name, 'catalog')
            catalog = db.get_values_long(f'select * from catalog where parent_catalog_id={id}')
            if len(catalog) == 0:
                product = db.get_values('*', 'catalog_id', id, 'product')
                if len(product) > 0:
                    for i in product:
                        back = 'product_' + str(i[0]) + '_' + str(i[1])
                        keyboard3.add(types.InlineKeyboardButton(text=i[2], callback_data=back))
            else:

                for i in catalog:
                    back = 'catalog' + str(i[0])
                    keyboard3.add(types.InlineKeyboardButton(text=i[1], callback_data=back))
                product = db.get_values('*', 'catalog_id', id, 'product')
                if len(product) > 0:
                    for i in product:
                        back = 'product_' + str(i[0]) + '_' + str(i[1])
                        keyboard3.add(types.InlineKeyboardButton(text=i[2], callback_data=back))
            try:
                keyboard3.add(types.InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data='exit_to_menu'))
                print(id)
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='üßê –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º –±—Ä–∞—Ç—å?',
                                      reply_markup=keyboard3)
            except Exception as e:
                print(e)

        if call.data in func.product_list():
            name = call.data.replace('product_', '')
            name = name.split('_')
            product = \
                db.get_values_long(
                    f'select * from product where product_id={int(name[0])} and catalog_id={int(name[1])}')[
                    0]
            count = len(db.get_values_long(f'select * from address where product_id={product[0]}'))
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text='üí∞ –ö—É–ø–∏—Ç—å', callback_data='buy' + call.data),
                         types.InlineKeyboardButton(text='‚Ü©Ô∏è –í –º–µ–Ω—é', callback_data='exit_to_menu'))
            if count > 0:
                text = f'‚û°Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product[2]}\n{product[3]}\n‚û°Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: {product[4]} {db.get_value("money_value", base="config")}'
            else:
                bot.answer_callback_query(callback_query_id=call.id, text='–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!', show_alert=True)
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=keyboard)
            except:
                pass

        if call.data in func.buy_product_list():
            product = func.BuyProduct(chat_id)
            product.product_id = call.data.replace('buyproduct_', '').split('_')[0]
            product.catalog_id = call.data.replace('buyproduct_', '').split('_')[1]
            product.count_max = len(db.get_values_long(f'select * from address where product_id={product.product_id}'))
            product.price = db.get_value_long(
                f'select cost from product where catalog_id={product.catalog_id} and product_id={product.product_id}')
            product.name = db.get_value_long(
                f'select name from product where product_id={product.product_id} and catalog_id={product.catalog_id}')
            product_dict[call.message.chat.id] = product
            # msg = bot.send_message(chat_id=chat_id,text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞(–º–∞–∫—Å–∏–º—É–º {product.count_max})',reply_markup=menu.cansel_button)
            try:
                call.message.text = '1'
                buy_first(call.message)
                # bot.register_next_step_handler(msg,buy_first)
            except:
                pass

        # ADMIN MENU
        if call.data == 'exit_to_adm_menu':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='<b>‚ôªÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é!</b>', reply_markup=menu.adm_menu,
                                          parse_mode='HTML')
                except Exception as e:
                    print(e)

        if call.data == 'exit_to_kur_menu':
            if func.is_kur(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='<b>‚ôªÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –ö—É—Ä—å–µ—Ä–∞!</b>', reply_markup=menu.kur_menu,
                                          parse_mode='HTML')
                except Exception as e:
                    print(e)

        if call.data == 'shop_config':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>',
                                          reply_markup=menu.shop_config, parse_mode='HTML')
                except:
                    pass

        if call.data == 'shop_config1':
            if func.is_kur(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='<b>‚öôÔ∏è‚ôªÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>',
                                          reply_markup=menu.shop_config1, parse_mode='HTML')
                except:
                    pass

        if call.data == 'users_config':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='<b>üë®‚Äçü¶∞ –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>',
                                          reply_markup=menu.users_config, parse_mode='HTML')
                except:
                    pass

        if call.data == 'payments_config':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='<b>üíµ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º</b>',
                                          reply_markup=menu.payments_config, parse_mode='HTML')
                except Exception as e:
                    print(e)

        if call.data == 'top_ref':
            if func.is_adm(call.message.chat.id):
                conn, cursor = db.connect()
                users = list(cursor.execute('select * from users where ref_earn>0 order by ref_earn').fetchall())

                if len(users) == 0:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ù–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...',
                                          reply_markup=menu.adm_menu)
                else:
                    text = '<b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n'
                    for i in users:
                        text = text + i[1] + ' (' + str(i[0]) + ') ' + ' - <i>' + i[7] + ' ' + db.get_value(
                            'money_value') + '</i>\n'
                    bot.send_message(chat_id, text, reply_markup=menu.cansel_button, parse_mode='HTML')

        if call.data == 'top_ref':
            if func.is_kur(call.message.chat.id):
                conn, cursor = db.connect()
                users = list(cursor.execute('select * from users where ref_earn>0 order by ref_earn').fetchall())

                if len(users) == 0:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ù–µ—Ç –ø—Ä–∏–±—ã–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...',
                                          reply_markup=menu.kur_menu)
                else:
                    text = '<b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>\n'
                    for i in users:
                        text = text + i[1] + ' (' + str(i[0]) + ') ' + ' - <i>' + i[7] + ' ' + db.get_value(
                            'money_value') + '</i>\n'
                    bot.send_message(chat_id, text, reply_markup=menu.cansel_button, parse_mode='HTML')

        if call.data == 'on_off_payments':
            if func.is_adm(call.message.chat.id):

                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                          reply_markup=menu.on_off_payments())
                except Exception as e:
                    print(e)



        if call.data == 'kuna_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_kuna')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'ltc_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_ltc')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'btc_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_btc')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'btc_c_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_btc_c')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'qiwi_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value()
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'easy_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_easypay')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'global_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_global24')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'promo_config':
            if func.is_adm(call.message.chat.id):
                db.set_payments_value('need_promo')
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚ñ∂–í–∫–ª—é—á–µ–Ω–∏–µ\\–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç.—Å–∏—Å—Ç–µ–º',
                                      reply_markup=menu.on_off_payments())

        if call.data == 'add_remove_payments':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='üìé–î–æ–±–∞–≤–ª–µ–Ω–∏–µ\\—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤',
                                          reply_markup=menu.add_remove_payments)
                except:
                    pass

        if call.data == 'add_replenish_number':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='üìé–î–æ–±–∞–≤–ª–µ–Ω–∏–µ\\—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤',
                                          reply_markup=menu.add_replenish_number)
                except:
                    pass

        if call.data == 'add_qiwi':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ', reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, add_qiwi1)

        if call.data == 'add_easy':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ', reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.add_easy)

        if call.data == 'add_global':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ', reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.add_global)

        if call.data == 'remove_replenish_number':
            if func.is_adm(call.message.chat.id):
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='‚úñ–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤: ',
                                      reply_markup=menu.remove_replenish_number)

        if call.data == 'remove_qiwi':
            if func.is_adm(call.message.chat.id):
                wallets = db.get_values('number', base='qiwi')
                text = '–ö–æ—à–µ–ª—å–∫–∏:\n'
                for i in wallets:
                    text = text + str(i[0]) + '\n'
                text = text + '\n‚úñ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!'
                msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.remove_qiwi)

        if call.data == 'remove_easy':
            if func.is_adm(call.message.chat.id):
                wallets = db.get_values('value', base='easypay')
                text = '–ö–æ—à–µ–ª—å–∫–∏:\n'
                for i in wallets:
                    text = text + str(i[0]) + '\n'
                text = text + '\n\n‚úñ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!'
                msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.remove_easy)

        if call.data == 'remove_global':
            if func.is_adm(call.message.chat.id):
                wallets = db.get_values('value', base='global24')
                text = '–ö–æ—à–µ–ª—å–∫–∏:\n'
                for i in wallets:
                    text = text + str(i[0]) + '\n'
                text = text + '\n\n‚úñ–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!'
                msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.remove_global)

        if call.data == 'cansel_button':
            bot.delete_message(chat_id=chat_id, message_id=message_id)
            bot.clear_step_handler(call.message)

        if call.data == 'add_promo':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='üíé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!',
                                          reply_markup=menu.adm_menu)
                    msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:', reply_markup=menu.cansel_button)
                    bot.register_next_step_handler(msg, func.add_promo1)
                except:
                    pass

        if call.data == 'change_ltc_wallet':
            if func.is_adm(call.message.chat.id):
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                          text='<b>üß∞–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Apirone wallet!</b>',
                                          reply_markup=menu.aperon_changes, parse_mode='HTML')
                except:
                    pass

        if call.data == 'change_ltc':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='üì•–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π WALLET ID –¥–ª—è LTC: ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.change_ltc)

        if call.data == 'change_btc':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='üì•–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π WALLET ID –¥–ª—è BTC: ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.change_btc)

        if call.data == 'change_bch':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='üì•–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π WALLET ID –¥–ª—è BCH: ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.change_bch)

        if call.data == 'promo_money':
            if func.is_adm(call.message.chat.id):
                try:
                    msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—É—á–µ—Ä–∞: ',
                                           reply_markup=menu.cansel_button)
                    bot.register_next_step_handler(msg, func.add_promo2)
                except Exception as e:
                    print(e)

        if call.data == 'promo_discount':
            if func.is_adm(call.message.chat.id):
                try:
                    msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –æ—Ç –≤–∞—É—á–µ—Ä–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä 13%): ',
                                           reply_markup=menu.cansel_button)
                    bot.register_next_step_handler(msg, func.add_promo_discount)
                except:
                    pass

        if call.data == 'set_discount':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id,
                                       text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.set_discount1)

        if call.data == 'set_balance':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.set_balance1)

        if call.data == 'add_adm':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.add_adm)

        if call.data == 'remove_adm':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ–≥–æ –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.remove_adm)

        if call.data == 'add_kur':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–º—É –≤—ã–¥–∞—Ç—å –ö—É—Ä—å–µ—Ä–∞ ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.add_kur)

        if call.data == 'remove_kur':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='‚ûï–í–≤–µ–¥–∏ ID\—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ–≥–æ –∑–∞–±—Ä–∞—Ç—å –ö—É—Ä—å–µ—Ä–∞ ',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.remove_kur)

        if call.data == 'sending_msg':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏! üí¨</b>',
                                       reply_markup=menu.cansel_button, parse_mode='HTML')
                bot.register_next_step_handler(msg, sending_msg1)

        if call.data == 'sending_msg_kur':
            if func.is_kur(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id, text='<b>üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏! üí¨</b>',
                                       reply_markup=menu.cansel_button, parse_mode='HTML')
                bot.register_next_step_handler(msg, sending_msg1)

        # Admin_menu shop_settings
        if call.data == 'set_money_value':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id,
                                       text=f'–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –±—É–¥–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å?\n–°–µ–π—á–∞—Å —É –Ω–∞—Å - {db.get_value("money_value")}',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.set_money_value)

        if call.data == 'set_info_message':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id,
                                       text=f'–ö–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å?\n–°–µ–π—á–∞—Å —É –Ω–∞—Å: \n{db.get_value("info_message")}',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.set_info_message)

        if call.data == 'set_ref_percent':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id,
                                       text=f'–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å?(—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n–°–µ–π—á–∞—Å —É –Ω–∞—Å - {db.get_value("referral_percent")}%',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.set_ref_percent)

        if call.data == 'add_parent_category':
            if func.is_adm(call.message.chat.id):
                msg = bot.send_message(chat_id=chat_id,
                                       text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                       reply_markup=menu.cansel_button)
                bot.register_next_step_handler(msg, func.add_parent_category, call, msg.message_id)

        if call.data == 'add_category':
            if func.is_adm(call.message.chat.id):
                parent_categorys = db.get_values_long('select * from catalog where catalog_id=parent_catalog_id')
                print(parent_categorys)
                if len(parent_categorys) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in parent_categorys:
                        back = '@#!$' + i[1] + '_' + str(i[2])
                        keyboard.add(types.InlineKeyboardButton(text=i[1], callback_data=back))
                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                    try:
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                              text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ä—à—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—Ç—å:', reply_markup=keyboard)
                    except:
                        pass
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ä—à–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)
        if call.data in func.list_add_category():
            name = call.data.replace('@#!$', '').split('_')[0]
            id = call.data.replace('@#!$', '').split('_')[1]
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ê–¥–º–∏–Ω –º–µ–Ω—é',
                                      reply_markup=menu.adm_menu)
            except Exception as e:
                print(e)
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:',
                                   reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, func.add_category, name, id, call.id, msg.message_id)

        if call.data == 'add_sub_category':
            if func.is_adm(call.message.chat.id):
                limit = 50
                sub_cat_count = db.get_valuedata('select count(*) from catalog where catalog_id!=parent_catalog_id')
                categorys = db.get_values_long(
                    f'select * from catalog where catalog_id!=parent_catalog_id limit {limit}')
                if len(categorys) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in categorys:
                        back = '@@#@' + i[1] + '_' + str(i[0])
                        parent = db.get_value('name', 'catalog_id', i[2], 'catalog')
                        keyboard.add(types.InlineKeyboardButton(text=i[1] + f'({parent})', callback_data=back))

                    if sub_cat_count > limit:
                        keyboard.add(types.InlineKeyboardButton(
                            text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {sub_cat_count - limit if sub_cat_count < 101 else limit}',
                            callback_data=f'add_sub_category_{limit}'))
                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                    try:

                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º?',
                                              reply_markup=keyboard)
                    except Exception as ex:
                        print(ex)
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)

        if re.search("add_sub_category_\d+", call.data) is not None:
            if func.is_adm(call.message.chat.id):
                offset = int(str(call.data).replace("add_sub_category_", ""))
                limit = offset + 50
                sub_cat_count = db.get_valuedata('select count(*) from catalog where catalog_id!=parent_catalog_id')
                categorys = db.get_values_long(
                    f'select * from catalog where catalog_id!=parent_catalog_id limit 50 offset {offset}')
                if len(categorys) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in categorys:
                        back = '@@#@' + i[1] + '_' + str(i[0])
                        parent = db.get_value('name', 'catalog_id', i[2], 'catalog')
                        keyboard.add(types.InlineKeyboardButton(text=i[1] + f'({parent})', callback_data=back))

                    if sub_cat_count > limit:
                        keyboard.add(types.InlineKeyboardButton(
                            text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {sub_cat_count - limit if sub_cat_count <= ((limit // 50) + 1) * 50 else 50}',
                            callback_data=f'add_sub_category_{limit}'))

                    keyboard.add(types.InlineKeyboardButton(
                        text=f'‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 50',
                        callback_data=f'add_sub_category_{offset - 50}' if offset - 50 > 0 else 'add_sub_category'))
                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                    try:

                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º?',
                                              reply_markup=keyboard)
                    except Exception as ex:
                        print(ex)
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)

        if call.data in func.list_add_sub_category():
            name = call.data.replace('@@#@', '').split('_')[0]
            id = call.data.replace('@@#@', '').split('_')[1]
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ê–¥–º–∏–Ω –º–µ–Ω—é',
                                      reply_markup=menu.adm_menu)
            except Exception as e:
                print(e)
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:',
                                   reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, func.add_category, name, id, call.id, msg.message_id)

        if call.data == 'add_product_to_category':
            if func.is_adm(call.message.chat.id):
                limit = 50
                catergory_count = db.get_valuedata('select count(*) from catalog where catalog_id!=parent_catalog_id')
                catalog = db.get_values_long(f'select * from catalog where catalog_id!=parent_catalog_id limit {limit}')
                if len(catalog) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in catalog:
                        parent = db.get_value('name', 'catalog_id', i[2], 'catalog')
                        back = '&&@#' + i[1] + '_' + str(i[0])
                        keyboard.add(types.InlineKeyboardButton(text=i[1] + f'({parent})', callback_data=back))

                    if catergory_count > limit:
                        keyboard.add(types.InlineKeyboardButton(
                            text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {catergory_count - limit if catergory_count < 101 else limit}',
                            callback_data=f'add_product_to_category_{limit}'))

                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                    try:
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º?',
                                              reply_markup=keyboard)
                    except:
                        pass
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)

        if re.search("add_product_to_category_\d+", str(call.data)) is not None:
            if func.is_adm(call.message.chat.id):
                offset = int(str(call.data).replace("add_product_to_category_", ""))
                limit = offset + 50
                catergory_count = db.get_valuedata('select count(*) from catalog where catalog_id!=parent_catalog_id')
                catalog = db.get_values_long(
                    f'select * from catalog where catalog_id!=parent_catalog_id limit 50 offset {offset}')
                if len(catalog) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in catalog:
                        parent = db.get_value('name', 'catalog_id', i[2], 'catalog')
                        back = '&&@#' + i[1] + '_' + str(i[0])
                        keyboard.add(types.InlineKeyboardButton(text=i[1] + f'({parent})', callback_data=back))

                    if catergory_count > limit:
                        keyboard.add(types.InlineKeyboardButton(
                            text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {catergory_count - limit if catergory_count <= ((limit // 50) + 1) * 50 else 50}',
                            callback_data=f'add_product_to_category_{limit}'))

                    keyboard.add(types.InlineKeyboardButton(
                        text=f'‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 50',
                        callback_data=f'add_product_to_category_{offset - 50}' if offset - 50 > 0 else 'add_product_to_category'))

                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                    try:
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º?',
                                              reply_markup=keyboard)
                    except:
                        pass
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)

        if call.data in func.list_add_product_to_category():
            id = call.data.replace('&&@#', '').split('_')[1]
            try:
                if func.is_adm(message.chat.id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ê–¥–º–∏–Ω –º–µ–Ω—é',
                                          reply_markup=menu.adm_menu)
                elif func.is_kur(message.chat.id):
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ú–µ–Ω—é –ö—É—Ä—å–µ—Ä–∞',
                                          reply_markup=menu.kur_menu)
            except Exception as e:
                print(e)
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:',
                                   reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, add_product_first, id, call.id, msg.message_id)

        if call.data == 'add_product':
            limit = 50
            product_count = db.get_value('count(*)', base='product')
            products = db.get_values_long(f"select * from product limit {limit}")
            if len(products) > 0:
                keyboard = types.InlineKeyboardMarkup()
                for i in products:
                    back = '~~#@' + i[2] + '_' + str(i[0])
                    keyboard.add(types.InlineKeyboardButton(text=i[2], callback_data=back))

                if product_count > limit:
                    keyboard.add(types.InlineKeyboardButton(
                        text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {product_count - limit if product_count < 101 else limit}',
                        callback_data=f'add_product_{limit}'))

                keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å?',
                                          reply_markup=keyboard)
                except Exception as ex:
                    print(ex)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                                          show_alert=True)

        if re.search("add_product_\d+", str(call.data)) is not None:
            offset = int(str(call.data).replace("add_product_", ""))
            limit = offset + 50
            product_count = db.get_value('count(*)', base='product')
            products = db.get_values_long(f"select * from product limit 50 offset {offset}")
            if len(products) > 0:
                keyboard = types.InlineKeyboardMarkup()
                for i in products:
                    back = '~~#@' + i[2] + '_' + str(i[0])
                    keyboard.add(types.InlineKeyboardButton(text=i[2], callback_data=back))

                if product_count > limit:
                    keyboard.add(types.InlineKeyboardButton(
                        text=f'‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–µ {product_count - limit if product_count <= ((limit // 50) + 1) * 50 else 50}',
                        callback_data=f'add_product_{limit}'))

                keyboard.add(types.InlineKeyboardButton(
                    text=f'‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 50',
                    callback_data=f'add_product_{offset - 50}' if offset - 50 > 0 else 'add_product'))

                keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_adm_menu'))
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å?',
                                          reply_markup=keyboard)
                except Exception as ex:
                    print(ex)
            else:
                bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                                          show_alert=True)

        if call.data in func.list_of_add_product():
            id = call.data.replace('~~#@', '').split('_')[1]
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞ (–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤: –≤–≤–æ–¥–∏—Ç–µ –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)',
                                   reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, func.add_product, id)

        if call.data == 'add_product_to_category_kur':
            if func.is_kur(call.message.chat.id):
                catalog = db.get_values_long('select * from catalog where catalog_id!=parent_catalog_id')
                if len(catalog) > 0:
                    keyboard = types.InlineKeyboardMarkup()
                    for i in catalog:
                        parent = db.get_value('name', 'catalog_id', i[2], 'catalog')
                        back = '&&@#' + i[1] + '_' + str(i[0])
                        keyboard.add(types.InlineKeyboardButton(text=i[1] + f'({parent})', callback_data=back))
                    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_kur_menu'))
                    try:
                        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º?',
                                              reply_markup=keyboard)
                    except:
                        pass
                else:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                              show_alert=True)

        if call.data == 'add_product_kur':
            products = db.get_values('*', base='product')
            if len(products) > 0:
                keyboard = types.InlineKeyboardMarkup()
                for i in products:
                    back = '~~#@' + i[2] + '_' + str(i[0])
                    keyboard.add(types.InlineKeyboardButton(text=i[2], callback_data=back))
                keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='exit_to_kur_menu'))
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ö—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å?',
                                          reply_markup=keyboard)
                except:
                    pass

        if call.data == 'del_category':
            categories_kb = types.InlineKeyboardMarkup(row_width=3)
            try:
                categories = db.get_categories_subcategories()
                if len(categories)<=0:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', show_alert=True)
                else:
                    for i in categories:
                        categories_kb.add(types.InlineKeyboardButton(text=str(i[0]) + ' | ' + str(i[1]), callback_data='@dc'+str(i[0])))

                    categories_kb.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='shop_config'))

                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="üí¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üí¢\n\n" +
                                                                                             "‚ûñ‚ûñ‚ûñüìå –í–Ω–∏–º–∞–Ω–∏–µüìå‚ûñ‚ûñ‚ûñ\n\n‚úÖ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã\n‚úÖ –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n‚úÖ –¢–∞–∫-–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=categories_kb)
            except Exception as e:
                print(e)


        try:
            if call.data in func.list_del_category():
                db.delete_category_subcategory(call.data.replace("@dc", ''))
                bot.answer_callback_query(callback_query_id=call.id, text=f'–£–¥–∞–ª–µ–Ω–æ', show_alert=True)
                shop_config(call)
        except Exception as e:
            print(e)


        if call.data == 'del_product':
            product_kb = types.InlineKeyboardMarkup(row_width=3)
            try:
                p = db.get_products()
                if len(p) <= 0:
                    bot.answer_callback_query(callback_query_id=call.id, text=f'‚ö†Ô∏è –ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞',
                                              show_alert=True)
                else:
                    for i in p:
                        product_kb.add(types.InlineKeyboardButton(text=str(i[0]) + ' | ' + str(i[1]),
                                                                     callback_data='@dp' + str(i[0])))

                    product_kb.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='shop_config'))

                    bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                             text="üí¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å üí¢",
                                             reply_markup=product_kb)
            except Exception as e:
                print(e)


        try:
            if call.data in func.list_del_product():
                db.delete_product(call.data.replace("@dp", ''))
                bot.answer_callback_query(callback_query_id=call.id, text=f'–£–¥–∞–ª–µ–Ω–æ', show_alert=True)
                shop_config(call)
        except Exception as e:
            print(e)

    def add_product_first(message, id, call_id, message_id):
        product = func.Add_Product()
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.delete_message(chat_id=message.chat.id, message_id=message_id)
        max = db.get_value_long('select max(product_id) from product')
        if max is None or max == '0':
            max = 0
        max += 1
        product.product_id = int(max)
        product.catalog_id = id
        product.call_id = call_id
        product.name = message.text
        msg = bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É:',
                               reply_markup=menu.cansel_button)
        product.message_id = msg.message_id
        bot.register_next_step_handler(msg, add_product_second, product)

    def add_product_first_kur(message, id, call_id, message_id):
        product = func.Add_Product_kur()
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.delete_message(chat_id=message.chat.id, message_id=message_id)
        max = db.get_value_long('select max(product_id) from product')
        if max is None or max == '0':
            max = 0
        max += 1
        product.product_id = int(max)
        product.catalog_id = id
        product.call_id = call_id
        product.name = message.text
        msg = bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–æ–≤–∞—Ä—É:',
                               reply_markup=menu.cansel_button)
        product.message_id = msg.message_id
        bot.register_next_step_handler(msg, add_product_second, product)

    def add_product_second(message, product):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.delete_message(chat_id=message.chat.id, message_id=product.message_id)
        product.descriptions = message.text
        msg = bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:',
                               reply_markup=menu.cansel_button)
        product.message_id = msg.message_id
        bot.register_next_step_handler(msg, add_product_third, product)

    def add_product_second_kur(message, product_kur):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.delete_message(chat_id=message.chat.id, message_id=product.message_id)
        product.descriptions = message.text
        msg = bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:',
                               reply_markup=menu.cansel_button)
        product.message_id = msg.message_id
        bot.register_next_step_handler(msg, add_product_third_kur, product)

    def add_product_third(message, product):
        bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        bot.delete_message(chat_id=message.chat.id, message_id=product.message_id)
        if func.isfloat(message.text):
            product.cost = float(message.text)
            conn, cursor = db.connect()
            cursor.execute('insert into product values(?,?,?,?,?)',
                           (product.product_id, product.catalog_id, product.name, product.descriptions, product.cost,))
            conn.commit()
            #
            try:
                bot.answer_callback_query(callback_query_id=product.call_id, text=f'–î–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä {product.name}',
                                          show_alert=True)
            except:
                bot.send_message(chat_id=message.chat.id, text=f'–î–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä: {product.name}',
                                 reply_markup=menu.main_menu)
        else:
            try:
                bot.answer_callback_query(callback_query_id=product.call_id, text=f'–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞!',
                                          show_alert=True)
            except Exception as e:
                print(e)
                bot.send_message(chat_id=message.chat.id, text=f'–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞!',
                                 reply_markup=menu.main_menu)

    def buy_first(message):
        product = product_dict[message.chat.id]
        product.count = int(message.text)
        sum = float(product.price) * int(product.count)
        discount = db.get_value('discount', 'user_id', product.user_id, 'users')
        try:
            if int(message.text) in range(1, int(product.count_max) + 1):
                if func.check_balance(message.chat.id, sum, discount):
                    bought = ''
                    conn, cursor = db.connect()
                    for i in db.get_values_long(
                            f'select link from address where product_id={product.product_id} limit {product.count}'):
                        bought = bought + i[0] + '\n'
                        cursor.execute('insert into purchases values(?,?,?)',
                                       (message.chat.id, datetime.now(), i[0],))
                        conn.commit()
                    cursor.close()
                    conn.close()
                    if func.is_kur(message.chat.id):
                        bot.send_message(chat_id=message.chat.id,
                                         text=f'‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\nüìó <b>–í—ã –∫—É–ø–∏–ª–∏:</b> {product.name}\nüìö <b>–ö–æ–ª-–≤–æ:</b> {product.count}\n‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\n\n\nüìé {bought}',
                                         reply_markup=menu.kur_main_menu, parse_mode='HTML')
                        func.ref_cur(sum, name=product.product_id)
                    elif func.is_adm(message.chat.id):
                        bot.send_message(chat_id=message.chat.id,
                                         text=f'‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\nüìó <b>–í—ã –∫—É–ø–∏–ª–∏:</b> {product.name}\nüìö <b>–ö–æ–ª-–≤–æ:</b> {product.count}\n‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\n\n\nüìé {bought}',
                                         reply_markup=menu.adm_main_menu, parse_mode='HTML')
                        func.ref_cur(sum, name=product.product_id)
                    else:
                        bot.send_message(chat_id=message.chat.id,
                                         text=f'‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\nüìó <b>–í—ã –∫—É–ø–∏–ª–∏:</b> {product.name}\nüìö <b>–ö–æ–ª-–≤–æ:</b> {product.count}\n‚ûñ‚ûñ‚ûñüéâüéâ‚ûñ‚ûñ‚ûñ\n\n\nüìé {bought}',
                                         reply_markup=menu.main_menu, parse_mode='HTML')
                        func.ref_cur(sum, name=product.product_id)
                    username = message.chat.username
                    func.remove_balance(message.chat.id, sum, discount)
                    db.remove_product(product.product_id, product.count)
                    bot.send_message(chat_id=config.CHAT_GROUP_ID,text=f'‚ùáÔ∏è –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä {product.name}\nüìï –ö–æ–ª-–≤–æ: {product.count}\nüìï –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {sum} {db.get_value("money_value")}\nüìï –¢–æ–≤–∞—Ä: {bought}\nüìï –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username}')
                else:
                    bot.send_message(chat_id=message.chat.id,
                                     text='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –∏ —Å–æ–≤–µ—Ä—à–∞–π –ø–æ–∫—É–ø–∫–∏.',
                                     reply_markup=menu.adm_main_menu if func.is_adm(
                                         message.chat.id) else menu.main_menu)
            else:
                bot.send_message(chat_id=message.chat.id,
                                 text='‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ',
                                 reply_markup=menu.adm_main_menu if func.is_adm(message.chat.id) else menu.main_menu)
        except Exception as e:
            print(e)
            bot.send_message(chat_id=message.chat.id,
                             text='‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É',
                             reply_markup=menu.adm_main_menu if func.is_adm(message.chat.id) else menu.main_menu)

    class Add_qiwi():
        def __init__(self):
            self.number = None
            self.token = None

    qiwi = Add_qiwi()

    def add_qiwi1(message):
        if func.is_adm(message.chat.id):
            qiwi.number = message.text
            msg = bot.send_message(chat_id=message.chat.id, text='‚ûï–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ', reply_markup=menu.cansel_button)
            bot.register_next_step_handler(msg, add_qiwi2)

    def add_qiwi2(message):
        if func.is_adm(message.chat.id):
            qiwi.token = message.text
            db.add_replenish('qiwi', qiwi.number, qiwi.token)
            bot.send_message(chat_id=message.chat.id, text='‚úÖ–î–æ–±–∞–≤–∏–ª QiwiMoney',
                             reply_markup=menu.add_remove_payments)

    def sending_msg1(message):
        qiwi.number = message.text
        msg = bot.send_message(chat_id=message.chat.id,
                               text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:\n"{qiwi.number}"\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 010110',
                               reply_markup=menu.cansel_button)
        bot.register_next_step_handler(msg, sending_msg2)

    def sending_msg2(message):
        if message.text == '010110':
            for i in db.get_values('user_id', base='users'):
                try:
                    bot.send_message(chat_id=i[0], text=qiwi.number)
                except:
                    pass
        else:
            if func.is_adm(message.chat.id):
                bot.send_message(chat_id=message.chat.id, text='Ooops.', reply_markup=menu.adm_menu)
            elif func.is_kur(message.chat.id):
                bot.send_message(chat_id=message.chat.id, text='Ooops.', reply_markup=menu.kur_menu)

    def telegram_polling():
        try:
            bot.polling(none_stop=True, timeout=60)  # constantly get messages from Telegram
        except Exception as e:
            print(
                f'\n---------------------------\n–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: \n{e} {datetime.now()}\n-------------------------\n')
            bot.stop_polling()
            time.sleep(10)
            telegram_polling()

    telegram_polling()


start_bot()
