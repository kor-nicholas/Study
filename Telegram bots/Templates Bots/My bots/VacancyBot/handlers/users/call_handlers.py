from time import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

from loader import dp

from data.config import ADMINS, group_id

from sql.sql_db import SQL_vacancy, SQL_people
from data.config import db_sql

from keyboards.default.reply import back, confirm_button
from keyboards.inline.inline import *

from states.state import Order

@dp.callback_query_handler()
async def all_callback(call: types.CallbackQuery):
    if '|' in call.data:

        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ callback_data
        category = call.data[:call.data.find('|')]

        sql_object = SQL_vacancy(db_sql)
        vacancys = sql_object.select_vacancy_for_category(category)
        sql_object.sql_close()

        # vacancy[0] - id; vacancy[1] - –∫–∞—Ç–µ–≥–æ—Ä–∏—è; vacancy[2] - –Ω–∞–∑–≤–∞–Ω–∏–µ; vacancy[3] - –æ–ø–∏—Å–∞–Ω–∏–µ; vacancy[4] - –∑–∞—Ä–ø–ª–∞—Ç–∞

        for vacancy in vacancys:

            vacancy_button = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ', callback_data=f'{vacancy[0]}vacancy')
                    ]
                ]
            )
            await call.message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy[2]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy[3]}\n\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy[4]}", reply_markup=vacancy_button)

        await call.message.answer("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ üëá", reply_markup=back)

    elif 'vacancy' in call.data:

        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ callback_data
        vacancy_id = call.data[:call.data.find('vacancy')]

        sql_object = SQL_people(db_sql)
        sql_object.add_vacancy_id(call.message.chat.id, int(vacancy_id))
        sql_object.sql_close()

        #
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –º–æ–∂–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å(- –µ—Å–ª–∏ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ): ")
        await Order.other_category.set()

@dp.message_handler(state=Order.other_category)
async def other_category(message: types.Message, state: FSMContext):
    await state.update_data(other_category=message.text)
    await state.update_data(telegram_id=message.chat.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û: ")
    await Order.fio.set()

@dp.message_handler(state=Order.fio)
async def fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É: ")
    await Order.email.set()

@dp.message_handler(state=Order.email)
async def phone(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    await Order.phone.set()

@dp.message_handler(state=Order.phone)
async def fio(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Å–æ—Ü.—Å–µ—Ç–∏: ")
    await Order.social_network.set()

@dp.message_handler(state=Order.social_network)
async def social_network(message: types.Message, state: FSMContext):
    await state.update_data(social_network=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ")
    await Order.education.set()

@dp.message_handler(state=Order.education)
async def education(message: types.Message, state: FSMContext):
    await state.update_data(education=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ")
    await Order.experience.set()

@dp.message_handler(state=Order.experience)
async def experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–Ω–∞–µ—Ç–µ: ")
    await Order.foreign_language.set()

@dp.message_handler(state=Order.foreign_language)
async def foreign(message: types.Message, state: FSMContext):
    await state.update_data(foreign=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä - —Ä–µ–∑—é–º–µ): ")
    await Order.doc.set()

@dp.message_handler(content_types=['document'], state=Order.doc)
async def doc(message: types.Message, state: FSMContext):
    await state.update_data(doc=message.document['file_id'])
    await message.answer("–î—Ä—É–≥–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ")
    await Order.other_info.set()

@dp.message_handler(state=Order.other_info)
async def other_info(message: types.Message, state: FSMContext):

    await state.update_data(other_info=message.text)
    info = await state.get_data()

    sql_object = SQL_people(db_sql)
    vacancy_id = sql_object.select_vacancy_id_for_telegram_id(message.chat.id)
    sql_object.sql_close()

    sql_object = SQL_vacancy(db_sql)
    vacancy_info = sql_object.select_vacancy_for_vacancy_id(int(vacancy_id[0]))
    sql_object.sql_close()

    # vacancy_info[0] - id; vacancy_info[1] - –∫–∞—Ç–µ–≥–æ—Ä–∏—è; vacancy_info[2] - –Ω–∞–∑–≤–∞–Ω–∏–µ; vacancy_info[3] - –æ–ø–∏—Å–∞–Ω–∏–µ;
    # vacancy_info[4] - –∑–∞—Ä–ø–ª–∞—Ç–∞

    await message.answer(f"–í–∞–∫–∞–Ω—Å–∏—è:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy_info[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy_info[3]}\n\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy_info[4]}\n\n"
                 f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {info['other_category']}\n\n"
                 f"–§–ò–û: {info['fio']}\nEmail: {info['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–°–æ—Ü.—Å–µ—Ç–∏: {info['social_network']}\n"
                 f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {info['education']}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {info['experience']}\n–ó–Ω–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤: {info['foreign']}\n"
                 f"–î—Ä—É–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ —Å–µ–±–µ): {info['other_info']}")

    await message.bot.send_document(message.chat.id, info['doc'], reply_markup=confirm_button)
    await Order.confirm_send.set()

@dp.message_handler(state=Order.confirm_send)
async def confirm(message: types.Message, state: FSMContext):

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ':
        info = await state.get_data()

        sql_object = SQL_people(db_sql)
        vacancy_id = sql_object.select_vacancy_id_for_telegram_id(message.chat.id)
        sql_object.add_vacancy_id(message.chat.id, -1)
        sql_object.sql_close()

        sql_object = SQL_vacancy(db_sql)
        vacancy_info = sql_object.select_vacancy_for_vacancy_id(int(vacancy_id[0]))
        sql_object.sql_close()

        # vacancy_info[0] - id; vacancy_info[1] - –∫–∞—Ç–µ–≥–æ—Ä–∏—è; vacancy_info[2] - –Ω–∞–∑–≤–∞–Ω–∏–µ; vacancy_info[3] - –æ–ø–∏—Å–∞–Ω–∏–µ;
        # vacancy_info[4] - –∑–∞—Ä–ø–ª–∞—Ç–∞

        await message.bot.send_message(group_id, f"–†–µ–∑—é–º–µ –æ—Ç @{message.from_user.username}\n\n"
               f"–í–∞–∫–∞–Ω—Å–∏—è:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {vacancy_info[2]}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy_info[4]}\n\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {info['other_category']}\n\n"
            f"–§–ò–û: {info['fio']}\nEmail: {info['email']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–°–æ—Ü.—Å–µ—Ç–∏: {info['social_network']}\n"
            f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {info['education']}\n–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {info['experience']}\n–ó–Ω–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤: {info['foreign']}\n"
            f"–î—Ä—É–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ —Å–µ–±–µ): {info['other_info']}")

        await message.bot.send_document(group_id, info['doc'])

        await message.answer("–†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ... –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è (–∏–ª–∏ –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã)", reply_markup=back)

        await state.finish()

    elif message.text == '–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–∫–∞–Ω—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –º–æ–∂–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å(- –µ—Å–ª–∏ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ): ")
        await Order.other_category.set()







































    """
    if '+' in call.data:

        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ callback_data
        index = call.data.find('+')
        id = call.data[:index]
        count = int(call.data[index:])

        # –î–æ—Å—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ (–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –≤—ã—à–µ–ª –∑–∞ —ç—Ç–æ —á–∏—Å–ª–æ)
        sql_object = SQL_product(db_sql)
        count_in_store = sql_object.sql_select_count_for_id(id)
        sql_object.sql_close()

        # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É (–±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ), —Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if count >= count_in_store[0]:
            await call.answer(f"–ù–∞ —Å–∫–ª–∞–¥–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {count_in_store[0]} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            await call.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('-', callback_data=f'{id}-{count + 1}'),
                    InlineKeyboardButton(f'{count + 1}', callback_data='count'),
                    InlineKeyboardButton('+', callback_data=f'{id}+{count + 1}')
                ],
                [
                    InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'{id}|{count + 1}')
                ]
            ]))

    elif '-' in call.data:

        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ callback_data
        index = call.data.find('-')
        id = call.data[:index]
        count = -int(call.data[index:])

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –º–µ–Ω—å—à–µ 1 —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–∞–∑–∞—Ç—å
        if count <= 1:
            await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
        else:
            await call.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('-', callback_data=f'{id}-{count - 1}'),
                    InlineKeyboardButton(f'{count - 1}', callback_data='count'),
                    InlineKeyboardButton('+', callback_data=f'{id}+{count - 1}')
                ],
                [
                    InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'{id}|{count - 1}')
                ]
            ]))

    elif '|' in call.data:

        # –†–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É –∏–∑ callback_data
        index = call.data.find('|')
        id = call.data[:index]
        count = int(call.data[index + 1:])

        # –î–æ—Å—Ç–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–≤–∞—Ä–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª —á–µ–ª–æ–≤–µ–∫ (id —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥–∞–ª—Å—è –ø–æ callback_data)
        sql_object = SQL_product(db_sql)
        # info[0] - id ; info[1] - name ; info[2] - description ; info[3] - prise ; info[4] - photo_id ; info[5] - count
        info = sql_object.sql_select_for_id(id)
        sql_object.sql_close()

        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª —á–µ–ª–æ–≤–µ–∫
        total = count * info[3]

        # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –ö–æ—Ä–∑–∏–Ω—ã
        sql_object2 = SQL_shop(db_sql)
        sql_object2.sql_add(str(call.message.chat.id), info[1], info[3], count, total)
        sql_object2.sql_close()

        await call.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É")

    elif call.data == 'read':

        # –ú–µ–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É read –Ω–∞ +, —Ç–æ –µ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—á–∏—Ç–∞–ª –ø—Ä–∞–≤–∏–ª–∞
        sql_object = SQL_people(db_sql)
        sql_object.change_read_for_telegram_id(call.message.chat.id)
        sql_object.sql_close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –¥–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
        await call.message.answer("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª\n"
                                  "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ üëá", reply_markup=back)

    elif 'order' in call.data:

        # –î–æ—Å—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã, –ø—Ä–æ—á–∏—Ç–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª (–ø—Ä–∞–≤–∏–ª–∞, read: "+" –∏–ª–∏ "-")
        sql_object = SQL_people(db_sql)
        read = sql_object.select_read_for_telegram_id(call.message.chat.id)
        sql_object.sql_close()

        if read[0] == '+':

            # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—á–∏—Ç–∞–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª(FAQ) - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (FSM)
            await call.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ... \n\n–î–ª—è –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ... ", reply_markup=ReplyKeyboardRemove())
            await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û: ")
            await Order.fio.set()

        elif read[0] == '-':

            # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª(FAQ) - –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            await call.message.answer("–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª(FAQ), –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", reply_markup=back)

        else:

            # –ï—Å–ª–∏ –≤ read –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É(–Ω–æ —Ç–∞–∫–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—Å—è –≤–æ–æ–±—â–µ - —Ä–∞–¥–∏ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏)
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ None –≤ —Å—Ç–æ–ª–±—Ü–µ read (–±–∞–∑–∞: people)")

    else:

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        await call.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")

@dp.message_handler(state=Order.fio)
async def input_fio(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –∏ –§–ò–û –≤ –°—Ç–µ–π—Ç
    await state.update_data(telegram_id=message.chat.id)
    await state.update_data(fio=message.text)

    # –ü—Ä–æ—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    await Order.phone.set()

@dp.message_handler(state=Order.phone)
async def input_phone(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç —Ç–µ–ª–µ—Ñ–æ–Ω
    await state.update_data(phone=message.text)

    # –ü—Ä–æ—Å–∏–º –≥–æ—Ä–æ–¥
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ")
    await Order.city.set()

@dp.message_handler(state=Order.city)
async def input_city(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç –≥–æ—Ä–æ–¥
    await state.update_data(city=message.text)

    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏(–ø–æ—á—Ç–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏", reply_markup=get_product_buttons)
    await Order.get_product.set()

@dp.message_handler(state=Order.get_product)
async def input_get_product(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–æ—á—Ç–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑)
    await state.update_data(get_product=message.text)

    if message.text == '–ü–æ—á—Ç–∞ üöö':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ù–æ–≤–æ–π –ø–æ—á—Ç—ã: ", reply_markup=ReplyKeyboardRemove())
        await Order.post_office.set()
    elif message.text == '–°–∞–º–æ–≤—ã–≤–æ–∑ üö¥‚Äç‚ôÇÔ∏è':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", reply_markup=ReplyKeyboardRemove())
        await Order.date.set()
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤–≤–∏–¥—É, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ üëá", reply_markup=get_product_buttons)
        await Order.get_product.set()

@dp.message_handler(state=Order.post_office)
async def input_place(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–æ–≤–æ–π –ø–æ—á—Ç—ã
    await state.update_data(post_office=message.text)
    info = await state.get_data()

    # –î–æ—Å—Ç–∞–µ–º total –∏–∑ —Ç–∞–±–ª–∏—Ü—ã people –ø–æ telegram_id
    sql_object = SQL_people(db_sql)
    total = sql_object.select_total_for_telegram_id(message.chat.id)
    sql_object.sql_close()

    # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–æ—Ä–∑–∏–Ω–µ –ø–æ telegram_id
    sql_object = SQL_shop(db_sql)
    shop = sql_object.sql_select_all_for_telegram_id(message.chat.id)
    sql_object.sql_close()

    # total[0] - –æ–±—â–∞—è —Å—É–º–º–∞
    # shop[0] - id –≤ –±–∞–∑–µ; shop[1] - telegram_id; shop[2] - name —Ç–æ–≤–∞—Ä–∞; shop[3] - —Ü–µ–Ω–∞; shop[4] - count; shop[5] - total(–∑–∞ —Ç–æ–≤–∞—Ä)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    for product in shop:
        text += f"{product[2]} : {product[3]} x {product[4]}—à—Ç = {product[5]}–≥—Ä–Ω\n"
    text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total[0]}–≥—Ä–Ω\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
    text += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {info['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–ì–æ—Ä–æ–¥: {info['city']}\n" \
             f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {info['get_product']}\n–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–æ–≤–æ–π –ø–æ—á—Ç—ã: {info['post_office']}"

    await message.answer(text)
    await message.answer("–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ üëá", reply_markup=confirm_button)
    await Order.confirm_send.set()


@dp.message_handler(state=Order.date)
async def input_data(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç –¥–∞—Ç—É
    await state.update_data(date=message.text)

    # –ü—Ä–æ—Å–∏–º –≤—Ä–µ–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è")
    await Order.clock.set()

@dp.message_handler(state=Order.clock)
async def input_clock(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –°—Ç–µ–π—Ç –≤—Ä–µ–º—è
    await state.update_data(clock=message.text)
    info = await state.get_data()

    # –î–æ—Å—Ç–∞–µ–º total –∏–∑ —Ç–∞–±–ª–∏—Ü—ã people –ø–æ telegram_id
    sql_object = SQL_people(db_sql)
    total = sql_object.select_total_for_telegram_id(message.chat.id)
    sql_object.sql_close()

    # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–æ—Ä–∑–∏–Ω–µ –ø–æ telegram_id
    sql_object = SQL_shop(db_sql)
    shop = sql_object.sql_select_all_for_telegram_id(message.chat.id)
    sql_object.sql_close()

    # total[0] - –æ–±—â–∞—è —Å—É–º–º–∞
    # shop[0] - id –≤ –±–∞–∑–µ; shop[1] - telegram_id; shop[2] - name —Ç–æ–≤–∞—Ä–∞; shop[3] - —Ü–µ–Ω–∞; shop[4] - count; shop[5] - total(–∑–∞ —Ç–æ–≤–∞—Ä)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    for product in shop:
        text += f"{product[2]} : {product[3]} x {product[4]}—à—Ç = {product[5]}–≥—Ä–Ω\n"
    text += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total[0]}–≥—Ä–Ω\n\n"

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
    text += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {info['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–ì–æ—Ä–æ–¥: {info['city']}\n" \
            f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {info['get_product']}\n–î–∞—Ç–∞: {info['date']}\n–í—Ä–µ–º—è: {info['clock']}"

    await message.answer(text)
    await message.answer("–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ üëá", reply_markup=confirm_button)
    await Order.confirm_send.set()

@dp.message_handler(state=Order.confirm_send)
async def input_confirm(message: types.Message, state: FSMContext):

    await state.update_data(confirm_send=message.text)

    if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ':
        info = await state.get_data()

        # –î–æ—Å—Ç–∞–µ–º total –∏–∑ —Ç–∞–±–ª–∏—Ü—ã people –ø–æ telegram_id
        sql_object = SQL_people(db_sql)
        total = sql_object.select_total_for_telegram_id(message.chat.id)
        sql_object.sql_close()

        # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ö–æ—Ä–∑–∏–Ω–µ –ø–æ telegram_id
        sql_object = SQL_shop(db_sql)
        shop = sql_object.sql_select_all_for_telegram_id(message.chat.id)
        sql_object.sql_close()

        # total[0] - –æ–±—â–∞—è —Å—É–º–º–∞
        # shop[0] - id –≤ –±–∞–∑–µ; shop[1] - telegram_id; shop[2] - name —Ç–æ–≤–∞—Ä–∞; shop[3] - —Ü–µ–Ω–∞; shop[4] - count; shop[5] - total(–∑–∞ —Ç–æ–≤–∞—Ä)

        # –°–æ–æ–±—â–µ–Ω–∏–µ - –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∞–º:
        # –ö–æ—Ä–∑–∏–Ω–∞
        order = f"–ó–∞–∫–∞–∑ –æ—Ç @{message.from_user.username}\n\n–ö–æ—Ä–∑–∏–Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞:\n"
        for product in shop:
            order += f"{product[2]} : {product[3]} x {product[4]}—à—Ç = {product[5]}–≥—Ä–Ω\n"
        order += f"\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total[0]}–≥—Ä–Ω\n\n"

        if info['get_product'] == '–ü–æ—á—Ç–∞ üöö':

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
            order += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ:\n–§–ò–û: {info['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–ì–æ—Ä–æ–¥: {info['city']}\n" \
                     f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {info['get_product']}\n–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ù–æ–≤–æ–π –ø–æ—á—Ç—ã: {info['post_office']}"

        elif info['get_product'] == '–°–∞–º–æ–≤—ã–≤–æ–∑ üö¥‚Äç‚ôÇÔ∏è':

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ
            order += f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–ª–æ–≤–µ–∫–µ:\n–§–ò–û: {info['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\n–ì–æ—Ä–æ–¥: {info['city']}\n" \
                     f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {info['get_product']}\n–î–∞—Ç–∞: {info['date']}\n–í—Ä–µ–º—è: {info['clock']}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º
        for admin in ADMINS:
            await message.bot.send_message(admin, order)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –≤–∞—à –∑–∞–∫–∞–∑, –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É ... ", reply_markup=back)
        sleep(1)
        await message.answer("–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá", reply_markup=feedback)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –°—Ç–µ–π—Ç
        await state.finish()

        # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    elif message.text == '–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ‚ùå':
        await message.answer("–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
        """





