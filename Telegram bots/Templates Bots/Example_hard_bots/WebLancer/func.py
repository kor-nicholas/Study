import datetime
import telebot
from bs4 import BeautifulSoup as bs

import config
import db
import json
import menu
import random

import requests

import test
from pay import Wrapper
from request import url, post, btc_url, btc_cash_url

bot = telebot.TeleBot(config.BOT_TOKEN)


def isfloat(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


def first_start(user_id, name, code):
    conn, cursor = db.connect()
    if code == '':
        code = 0
    row = cursor.execute('select * from users where "user_id"=?', (user_id,)).fetchall()
    if len(row) == 0:
        cursor.execute('insert into users values (?,?,?,?,?,0,0,0)',
                       (user_id, name, datetime.datetime.now(), user_id, code,))
        conn.commit()
    if db.get_value('value', base='adm_id') is None:
        cursor.execute('insert into adm_id values(?)', (user_id,))
        conn.commit()
    bot_name = bot.get_me().username
    cursor.execute('update config set bot_url=?', (bot_name,))
    conn.commit()
    cursor.close()
    conn.close()


def get_user(user_id):
    conn, cursor = db.connect()
    user = cursor.execute('select * from users where user_id=?', (user_id,)).fetchone()
    cursor.close()
    conn.close()
    return user


def qiwi_money(user_id):
    conn, cursor = db.connect()
    code = random.randint(1111111111, 9999999999)

    numbers = db.get_values('number', base='qiwi')
    number = random.choice(numbers)[0]
    msg = cursor.execute('select qiwi_text from config').fetchone()[0].format(
        number=number,
        code=code,
    )
    try:
        row = cursor.execute('select * from check_qiwi where user_id=?', (user_id,)).fetchone()
        if row is not None:
            cursor.execute(f'update check_qiwi set code=?,number=? WHERE user_id = ?', (code, number, user_id))
            conn.commit()
        else:
            cursor.execute(f'insert into check_qiwi values(?,?,?)', (user_id, code, number,))
            conn.commit()
    except Exception as e:
        print(e)
    cursor.close()
    conn.close()
    return msg


def check_qiwi_money(user_id):
    conn, cursor = db.connect()
    try:
        text = cursor.execute('select * from check_qiwi where user_id=?', (user_id,)).fetchone()
        number = text[2]
        token = db.get_value('token', 'number', "{}".format(number), 'qiwi')
        session = requests.Session()
        session.headers['authorization'] = 'Bearer ' + token

        parameters = {'rows': '5'}
        h = session.get(
            'https://edge.qiwi.com/payment-history/v1/persons/{}/payments'.format(number),
            params=parameters)
        req = json.loads(h.text)
        comment = text[1]
        for j in range(len(req['data'])):
            if str(comment) == str(req['data'][j]['comment']):
                cursor.execute(f'DELETE FROM check_qiwi WHERE user_id = ?', (user_id,))
                conn.commit()

                referral_percent(user_id, float(req["data"][j]["sum"]["amount"]))
                cursor.close()
                conn.close()
                return 1, req["data"][j]["sum"]["amount"]
    except Exception as e:
        print(e)
    return 0, 0


def kuna_code(user_id):
    msg = '''‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π KUNA Code –≤ —á–∞—Ç. \n
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: \n 
    * UAH \n
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n
    1Ô∏è‚É£ –ß–µ—Ä–µ–∑ –ª—é–±–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª EasyPay - –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é>> –≥—Ä–æ—à–æ–≤—ñ –ø–µ—Ä–µ–∫–∞–∑–∏ 
    >> –≤—ã–±–∏—Ä–∞–µ–º Kuna Code >> 
    –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ >> 
    –≤–Ω–æ—Å–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É + –∫–æ–º–∏—Å—Å–∏—é >> 
    –ø–æ–ª—É—á–∞–µ–º —Å–º—Å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å Kuna –ö–æ–¥–æ–º –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–æ—Ç—É.\n
    2Ô∏è‚É£ –ß–µ—Ä–µ–∑ —Å–∞–π—Ç Kuna.io –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ(–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É)  >> 
    –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∫–∞–±–∏–Ω–µ—Ç >> 
    –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ê–∫—Ç–∏–≤—ã >> 
    –≤ —Å–ø–∏—Å–∫–µ –≤—ã–±–∏—Ä–∞–µ—Ç–µ UAH –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å>> –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ —Å –ø–æ–º–æ—â—å—é –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã >> –ù–∞–∂–∏–º–∞–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Kuna Code >>  
    –ø–æ–ª—É—á–∞–µ—Ç–µ Kuna Code –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ë–æ—Ç—É.\n
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥:'''
    return msg


def aperon_code(user_id):
    session = requests
    get_wallet_form_server = session.post(url, data=json.dumps(post))
    get_wallet = get_wallet_form_server.json()
    get_wallet_address = get_wallet['address']

    msg = '''üíµ –ë–∞–ª–∞–Ω—Å\n
    –í–∞—à –ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å LTC –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∏–∂–µ.\n
    –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ \n    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏ (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞).
    ‚ö†Ô∏è–ê–¥—Ä–µ—Å—Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n'''

    db.post_wallet_ltc_address(user_id, get_wallet_address)

    return msg, get_wallet_address


# ---------------------------------------- LTC -------------------------------------------------------------------------
def check_aperon_money(user_id):
    wallet = db.get_payment_ltc_address(user_id)
    wallet_address = db.get_wallet_form_bot('wallet_ltc')
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}".format(user_id, wallet[1]))
    try:
        session = requests
        get = session.get('https://apirone.com/api/v2/wallets/{}/addresses/{}' \
                          .format(db.get_wallet_form_bot('wallet_ltc')[0], wallet[1]))
        resp = get.json()
        jstr = resp['balance']
        balance_amount = jstr['available']
        a = """
        ---------–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞!----------
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}
        –ö–æ—à–µ–ª–µ–∫: {}
        –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞: {}
        -------------------------------------------
        """.format(user_id, wallet[1], jstr['total'], jstr['available'])
        print(a)
        request = requests.get("https://apirone.com/api/v2/ticker?currency=ltc")
        ltc_curse = request.json()
        get_curser_btc = ltc_curse["uah"]
        ########################################################
        get_avail_btc = get_curser_btc / 100000000
        payment_request = balance_amount * get_avail_btc
        if balance_amount > 0:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ".format(user_id,
                                                                                                              wallet[
                                                                                                                  1]))
            return 1, payment_request
        else:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç–∫–∞–∑–∞–Ω–æ".format(user_id,
                                                                                                               wallet[
                                                                                                                   1]))

    except Exception as e:
        print(e)

    return 0, 0


# ----------------------------------------------------------------------------------------------------------------------
# -------------------------------------------- BTC ---------------------------------------------------------------------
def bitcoin(user_id):
    session = requests
    get_from_server = session.post(btc_url, data=json.dumps(post))
    post_server = get_from_server.json()
    btc_address = post_server['address']
    msg = '''üíµ –ë–∞–ª–∞–Ω—Å\n
    –í–∞—à –ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å BTC –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∏–∂–µ.\n
    –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ \n    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏ (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞).
    ‚ö†Ô∏è–ê–¥—Ä–µ—Å—Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n'''
    db.post_wallet_address(user_id, address=btc_address)
    return msg, btc_address


def check_payment_bitcoin(user_id):
    wallet = db.get_payment_btc_address(user_id)
    btc = db.get_wallet_form_bot('wallet_btc')
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}".format(user_id, wallet[1]))
    try:
        session = requests
        get = session.get('https://apirone.com/api/v2/wallets/{}/addresses/{}' \
                          .format(btc[0], wallet[1]))
        resp = get.json()
        table = resp['balance']
        table_value_available = table['available']
        a = """
        ---------–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞!----------
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}
        –ö–æ—à–µ–ª–µ–∫: {}
        –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞: {}
        -------------------------------------------
        """.format(user_id, wallet[1], table['total'], table_value_available)
        print(a)
        request = requests.get("https://apirone.com/api/v2/ticker?currency=btc")
        ltc_curse = request.json()
        get_curser_btc = ltc_curse["uah"]
        ########################################################
        get_avail_btc = get_curser_btc / 100000000
        payment_request = table_value_available * get_avail_btc
        if payment_request > 0:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ".format(user_id,
                                                                                                              wallet))
            return 1, payment_request
        else:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç–∫–∞–∑–∞–Ω–æ".format(user_id,
                                                                                                               wallet))
    except Exception as e:
        print(e)

    return 0, 0


# -----------------------------------------------------------------------------------------------------------------------
# -------------------------------------------- BCH ---------------------------------------------------------------------
def bitcoin_cash(user_id):
    session = requests
    get_from_server = session.post(btc_cash_url, data=json.dumps(post))
    post_server = get_from_server.json()
    bch_address = post_server['address']
    msg = '''üíµ –ë–∞–ª–∞–Ω—Å\n
    –í–∞—à –ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å BTC –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∏–∂–µ.\n
    –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ \n    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏ (–æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞).
    ‚ö†Ô∏è–ê–¥—Ä–µ—Å—Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n'''.format(bch_address)
    db.post_wallet_bch_address(user_id, address=bch_address)
    return msg, bch_address


def check_payment_bitcoin_cash(user_id):
    wallet = db.get_payment_bch_address(user_id)
    bch_admin_wallet = db.get_wallet_form_bot('wallet_bch')
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}".format(user_id, wallet[0]))
    try:
        session = requests
        get = session.get('https://apirone.com/api/v2/wallets/{}/addresses/{}' \
                          .format(bch_admin_wallet[0], wallet[0]))
        print(bch_admin_wallet[0], wallet[0])
        resp = get.json()
        table = resp['balance']
        table_value_available = table['available']
        print(table_value_available)
        a = """
        ---------–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞!----------
        ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}
        –ö–æ—à–µ–ª–µ–∫: {}
        –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞: {}
        -------------------------------------------
        """.format(user_id, wallet, table['total'], table_value_available)
        print(a)
        request = requests.get("https://apirone.com/api/v2/ticker?currency=bch")
        ltc_curse = request.json()
        get_curser_btc = ltc_curse["uah"]
        ########################################################
        get_avail_btc = get_curser_btc / 100000000
        payment_request = table_value_available * get_avail_btc
        if payment_request > 0:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ".format(user_id,
                                                                                                              wallet))
            return 1, payment_request
        else:
            print(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {}, –°–æ–∑–¥–∞–ª TASK –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞: {}, –†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç–∫–∞–∑–∞–Ω–æ".format(user_id,
                                                                                                               wallet))
    except Exception as e:
        print(e)

    return 0, 0


def ref_cur(cur_sum, name):
    address = db.get_values("user_id_pony", where="product_id", are=name, base="address")
    end_balance_for_pony = 5 * cur_sum / 100
    add_balance(address[0][0], end_balance_for_pony)

    """ –ö—É—Ä—å–µ—Ä—É –Ω–∞—á–∏—Å–ª–∏–ª–æ {} –∑–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä! """.format(cur_sum)



def check_kuna_code(code):
    kuna = Wrapper(config.KUNA_PUBLIC, config.KUNA_PRIVATE)
    try:
        print("check_k-code_funcs")
        response = kuna.load(code)
        print(response)
        if response["currency"] == "uah":
            return 1, response['amount']
        else:
            return 0, 0
    except Exception as e:
        print(e)

    return 0, 0


def global24_check(user_id):
    conn, cursor = db.connect()
    check_data = list(cursor.execute("select * from easypay_global_check where user_id=?", (user_id,)).fetchone())

    cursor.execute("select * from check_id")
    id_check = cursor.fetchall()
    massive = []
    for i in id_check:
        for j in i:
            massive.append(j)

    if int(check_data[1]) not in massive:
        session = requests.Session()
        url = 'https://www.city24.ua/ua/payment/check?payId='
        test = session.get(url + str(check_data[1]))
        if '<Response [200]>' == str(test):
            try:
                soup = bs(test.text)
                if str(check_data[1]) in str(soup.body.check.text) and '–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: ' + str(check_data[2]) in str(
                        soup.body.check.text):
                    for i in db.get_values('value', base='global24'):
                        if str(i[0]) in str(soup.body.check.text):
                            print("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!")
                            cursor.execute("insert into check_id values(?)", (check_data[1],))
                            conn.commit()
                            referral_percent(user_id, check_data[2])
                            cursor.close()
                            conn.close()
                            return 1, check_data[2]
                        else:
                            print("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")
                    return 0, 0
            except:
                print("–û—à–∏–±–∫–∞")
                return 0, 0
            else:
                print("—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç. –Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞—à–µ–ª")
                return 0, 0
        else:
            print("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            return 0, 0
    else:
        print("ID –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ!!!")
        return 0, 0


def easypay_check(user_id):
    conn, cursor = db.connect()
    check_data = list(cursor.execute("select * from easypay_global_check where user_id=?", (user_id,)).fetchone())

    id_check = list(cursor.execute("select * from check_id").fetchall())
    massive = []
    for i in id_check:
        for j in i:
            massive.append(j)
    if int(check_data[1]) not in massive:
        base_url = 'https://api.easypay.ua/api/payment/getReceipt'
        data = {'receiptId': check_data[1], 'amount': check_data[2]}
        headers = {'accept': 'text/html'}
        response = requests.get(base_url, data, headers=headers)
        response.encoding = 'utf-8'
        full_status = response.text
        if '{"error":{"errorCode"' in full_status:
            print("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            return 0, 0
        elif '<Response [200]>' == str(response):
            if str(check_data[1]) in full_status and str(check_data[2]) in full_status:
                for i in db.get_values('value', base='easypay'):
                    if str(i[0]) in full_status:
                        print("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!")
                        cursor.execute("insert into check_id values(?)", (check_data[1],))
                        conn.commit()
                        referral_percent(user_id, check_data[2])
                        return 1, check_data[2]
                    else:
                        print('–û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –æ–ø–ª–∞—Ç–æ–π.')
                return 0, 0
            else:
                print("—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç. –Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞—à–µ–ª")
                return 0, 0
        for i in db.get_values('value', base='easypay'):
            if f'EasyPay - –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö –≥—Ä–æ—à–µ–π {i[0]}' in full_status or f"EasyPay - —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥ {i[0]}" in full_status:
                print("–û–ø–ª–∞—Ç–∏–ª–∏!!!!")
                cursor.execute("insert into check_id values(?)", (check_data[1],))
                conn.commit()
                referral_percent(user_id, check_data[2])
                return 1, check_data[2]
            else:
                pass
            return 0, 0
        else:
            print("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")
            return 0, 0
    else:
        return 0, 0


def referral_percent(user_id, sum):
    conn, cursor = db.connect()
    try:
        invite_by = cursor.execute('select invite_by from users where user_id=?', (user_id,)).fetchone()
        if invite_by[0] != '0':
            ref_id = list(cursor.execute('select user_id from users where ref_code = ?',
                                         (invite_by[0],)).fetchone())
            money_to_add = float(sum) / 100 * db.get_value('referral_percent')
            add_balance(ref_id[0], money_to_add)
            cursor.execute(f'update users set ref_earn=ref_earn+{money_to_add} where user_id=?',
                           (ref_id[0],))
            conn.commit()
            cursor.close()
            conn.close()
    except:
        print('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—É')


def add_balance(user_id, sum):
    conn, cursor = db.connect()
    try:
        cursor.execute(f'update users set balance=balance+{sum} where user_id=?', (user_id,))
        conn.commit()
        cursor.close()
        conn.close()
    except:
        print('–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!')


def remove_balance(user_id, sum, discount=0.0):
    conn, cursor = db.connect()
    try:
        balance = float(db.get_value('balance', 'user_id', user_id, 'users'))
        balance = balance - sum + sum / 100 * float(discount)
        cursor.execute(f'update users set balance=? where user_id=?', (balance, user_id,))
        conn.commit()
        cursor.close()
        conn.close()
    except Exception as e:
        print(e)


def add_discount(user_id, count):
    conn, cursor = db.connect()
    try:
        discount = list(cursor.execute('select discount from users where user_id = ?', (user_id,)).fetchone())
        discount[0] += float(count)
        if int(discount[0]) > 100:
            discount[0] = 100
        cursor.execute('update users set discount=? where user_id=?', (discount[0], user_id,))
        conn.commit()
        cursor.close()
        conn.close()
    except:
        pass


def write_to_adm(user_id, sum, type='balance'):
    if type != 'balance':
        msg = f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ \nüìç –û—Ç <a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>.\nüí≥ –ü–æ–ª—É—á–µ–Ω–æ: {sum} USD'
    else:
        msg = f'‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ \nüìç –û—Ç <a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>.\nüí≥ –°—É–º–º–∞ = {sum} {db.get_value("money_value")}'
    try:
        for i in db.get_values('value', base='adm_id'):
            bot.send_message(chat_id=config.CHAT_GROUP_ID, text=msg, parse_mode='html')
    except:
        pass
    try:
        bot.send_message(chat_id=db.get_value('value', base='channel_id'), text=msg, parse_mode='html')
    except:
        pass


def print_good_payment(message_id, chat_id, call_id, sum):
    bot.answer_callback_query(callback_query_id=call_id,
                              text=f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {sum} {db.get_value("money_value")}')
    try:
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f'‚úÖ–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {sum} {db.get_value("money_value")}',
                              reply_markup=menu.main_menu)
    except:
        pass


def promo(message):
    conn, cursor = db.connect()
    try:
        text = message.text
        bonus = db.get_value('bonus', 'promo', text, 'promo_code')
        if bonus is not None:
            if '%' in bonus:
                add_discount(message.chat.id, bonus.replace('%', ''))
                bot.send_message(chat_id=message.chat.id,
                                 text=f'‚òë–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—É—á–µ—Ä –∏ –ø–æ–ª—É—á–∏–ª–∏ {bonus} —Å–∫–∏–¥–∫–∏!!!',
                                 reply_markup=menu.main_menu)
            else:
                add_balance(message.chat.id, bonus)
                bot.send_message(chat_id=message.chat.id,
                                 text=f'‚òë–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—É—á–µ—Ä –∏ –ø–æ–ª—É—á–∏–ª–∏ {bonus} {db.get_value("money_value")}',
                                 reply_markup=menu.main_menu)
            cursor.execute('delete from promo_code where promo=?', (text,))
            conn.commit()
            write_to_adm(message.chat.id, bonus, 'promo')
        else:
            bot.send_message(chat_id=message.chat.id, text='üìõ–¢–∞–∫–æ–≥–æ –≤–∞—É—á–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...',
                             reply_markup=menu.main_menu)
    except:
        bot.send_message(chat_id=message.chat.id, text='üìõ–¢–∞–∫–æ–≥–æ –≤–∞—É—á–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...',
                         reply_markup=menu.main_menu)
    cursor.close()
    conn.close()


def change_ref_code(message):
    conn, cursor = db.connect()
    link = message.text
    old_link = db.get_value('ref_code', 'user_id', message.chat.id, 'users')
    user_id = message.chat.id
    text = list(cursor.execute('select * from users where ref_code = ?', (link,)).fetchall())
    if len(text) == 0:
        cursor.execute('update users set invite_by=? where invite_by=?', (link, old_link,))
        conn.commit()
        cursor.execute('update users set ref_code=? where user_id=?', (link, user_id,))
        conn.commit()
        bot.send_message(chat_id=user_id, text='‚úî–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!',
                         reply_markup=menu.main_menu)
        cursor.close()
        conn.close()
    else:
        bot.send_message(chat_id=user_id, text='‚ùó–¢–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é!',
                         reply_markup=menu.ref_system)


def easypay_first(message):
    conn, cursor = db.connect()
    easy_data = message.text
    if " " in easy_data and "  " not in easy_data:
        easy_data = easy_data.split(" ")
        if easy_data[0].isdigit():
            receiptId = easy_data[0]
            amount = easy_data[1]
            bot.send_message(chat_id=message.chat.id, text=f"ID –ø–µ—Ä–µ–≤–æ–¥–∞ = {receiptId}, –°—É–º–º–∞ = {amount}",
                             reply_markup=menu.easypay_check)
            try:
                cursor.execute("delete from easypay_global_check where user_id=?",
                               (message.chat.id,))
                conn.commit()
            except:
                pass
            cursor.execute("insert into easypay_global_check values(?,?,?)",
                           (message.chat.id, receiptId, amount,))
            conn.commit()
            cursor.close()
            conn.close()

        else:
            bot.send_message(chat_id=message.chat.id, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                             reply_markup=menu.main_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                         reply_markup=menu.main_menu)


def global24_first(message):
    conn, cursor = db.connect()
    easy_data = message.text
    if " " in easy_data and "  " not in easy_data:
        easy_data = easy_data.split(" ")
        if easy_data[0].isdigit():
            receiptId = easy_data[0]
            amount = easy_data[1]
            bot.send_message(chat_id=message.chat.id, text=f"ID –ø–µ—Ä–µ–≤–æ–¥–∞ = {receiptId}, –°—É–º–º–∞ = {amount}",
                             reply_markup=menu.global24_check)
            try:
                cursor.execute("delete from easypay_global_check where user_id=?",
                               (message.chat.id,))
                conn.commit()
            except:
                pass
            cursor.execute("insert into easypay_global_check values(?,?,?)",
                           (message.chat.id, receiptId, amount,))
            conn.commit()
            cursor.close()
            conn.close()

        else:
            bot.send_message(chat_id=message.chat.id, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                             reply_markup=menu.main_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                         reply_markup=menu.main_menu)


def add_easy(message):
    number = message.text
    db.add_replenish(number=number)
    bot.send_message(chat_id=message.chat.id, text='‚úÖ–î–æ–±–∞–≤–∏–ª EasyPay',
                     reply_markup=menu.add_remove_payments)


def add_global(message):
    number = message.text
    db.add_replenish('global24', number=number)
    bot.send_message(chat_id=message.chat.id, text='‚úÖ–î–æ–±–∞–≤–∏–ª GlobalMoney',
                     reply_markup=menu.add_remove_payments)


def remove_qiwi(message):
    number = message.text
    db.remove_replanish('qiwi', number)
    bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–£–¥–∞–ª–∏–ª –∫–æ—à–µ–ª–µ–∫ {number}',
                     reply_markup=menu.remove_replenish_number)


def remove_easy(message):
    number = message.text
    db.remove_replanish('easypay', number)
    bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–£–¥–∞–ª–∏–ª –∫–æ—à–µ–ª–µ–∫ {number}',
                     reply_markup=menu.remove_replenish_number)


def remove_global(message):
    number = message.text
    db.remove_replanish('global24', number)
    bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–£–¥–∞–ª–∏–ª –∫–æ—à–µ–ª–µ–∫ {number}',
                     reply_markup=menu.remove_replenish_number)


class Add_promo():
    def __init__(self):
        self.promo = None
        self.bonus = None


promocode = Add_promo()


def add_promo1(message):
    promocode.promo = message.text
    values = db.get_values('promo', 'promo', '"{}"'.format(message.text), 'promo_code')
    if len(values) > 0:
        return bot.send_message(message.chat.id, text='‚ùó–¢–∞–∫–æ–π –≤–∞—É—á–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...', reply_markup=menu.adm_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text='‚ñ´–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—É—á–µ—Ä–∞: ', reply_markup=menu.promo_type)


def change_ltc(message):
    db.change_ltc_bot(message.text)
    bot.send_message(chat_id=message.chat.id, text="‚úÖWallet id, —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=menu.adm_menu)


def change_btc(message):
    db.change_btc_bot(message.text)
    bot.send_message(chat_id=message.chat.id, text="‚úÖWallet id, —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=menu.adm_menu)


def change_bch(message):
    db.change_bch_bot(message.text)
    bot.send_message(chat_id=message.chat.id, text="‚úÖWallet id, —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=menu.adm_menu)


def add_promo2(message):
    if message.text.isdigit() or '%' in message.text:
        promocode.bonus = message.text
    else:
        return bot.send_message(message.chat.id, text='‚ùó–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥...', reply_markup=menu.adm_menu)
    try:
        db.add_promo(promocode.promo, promocode.bonus)
        bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—É—á–µ—Ä! \n{promocode.promo} - {promocode.bonus}',
                         reply_markup=menu.adm_menu)
    except Exception as e:
        print(e)


def add_promo_discount(message):
    if message.text.isdigit():
        promocode.bonus = message.text + '%'
    elif '%' in message.text:
        promocode.bonus = message.text
    else:
        return bot.send_message(message.chat.id, text='‚ùó–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥...', reply_markup=menu.adm_menu)
    try:
        db.add_promo(promocode.promo, promocode.bonus)
        bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤–∞—É—á–µ—Ä! \n{promocode.promo} - {promocode.bonus}',
                         reply_markup=menu.adm_menu)
    except Exception as e:
        print(e)


def is_adm(id):
    if db.get_value('value', 'value', id, 'adm_id') is not None:
        return True
    else:
        return False


def is_kur(id):
    if db.get_value('value', 'value', id, 'kur_id') is not None:
        return True
    else:
        return False


def set_balance1(message):
    text = message.text
    text = text.split(' ')
    ids = text[0]
    if text[0].isdigit() is False:
        ids = text[0].replace('@', '')
        ids = db.get_value('user_id', 'name', ids, 'users')
    if ids is None:
        bot.send_message(message.chat.id, text='‚ùå–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ...', reply_markup=menu.adm_menu)
    else:
        if db.get_value('*', 'user_id', ids, 'users') is not None:
            db.set_balance(ids, text[1])
            msg = bot.send_message(message.chat.id, text=f'‚úÖ–£—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ids} - {text[1]}',
                                   reply_markup=menu.adm_menu)
        else:
            bot.send_message(message.chat.id, text='‚ùå–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ...',
                             reply_markup=menu.adm_menu)


def set_discount1(message):
    text = message.text
    text = text.split(" ")
    if int(text[1]) > 100:
        text[1] = 100
    elif int(text[1]) < 0:
        text[1] = 0
    if text[0].isdigit() is False:
        ids = text[0].replace('@', '')
        ids = db.get_value('user_id', 'name', ids, 'users')
    if ids is None:
        bot.send_message(message.chat.id, text='‚ùå–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ...', reply_markup=menu.adm_menu)
    else:
        if db.get_value('*', 'user_id', ids, 'users') is not None:
            db.set_discount(ids, text[1])
            bot.send_message(chat_id=message.chat.id, text=f'‚úÖ–£—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ids} - {text[1]}',
                             reply_markup=menu.adm_menu)
        else:
            bot.send_message(message.chat.id, text='‚ùå–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ...',
                             reply_markup=menu.adm_menu)


def add_adm(message):
    id = message.text
    if id.isdigit() is False:
        id = id.replace('@', '')
        id = db.get_value('user_id', 'name', id, 'users')
    if db.get_value('*', 'user_id', id, 'users') is not None:
        db.add_adm(id)
        bot.send_message(chat_id=message.chat.id, text=f'–í—ã–¥–∞–ª –∞–¥–º–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id}', reply_markup=menu.adm_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text=f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ', reply_markup=menu.adm_menu)


def remove_adm(message):
    id = message.text
    if id.isdigit() is False:
        id = id.replace('@', '')
        id = db.get_value('user_id', 'name', id, 'users')
    if db.get_value('*', 'user_id', id, 'users') is not None:
        db.remove_adm(id)
        bot.send_message(chat_id=message.chat.id, text=f'–£–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∞ {id}', reply_markup=menu.adm_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text=f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ', reply_markup=menu.adm_menu)


def add_kur(message):
    id = message.text
    if id.isdigit() is False:
        id = id.replace('@', '')
        id = db.get_value('user_id', 'name', id, 'users')
    if db.get_value('*', 'user_id', id, 'users') is not None:
        db.add_kur(id)
        bot.send_message(chat_id=message.chat.id, text=f'–í—ã–¥–∞–ª –∫—É—Ä—å–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id}', reply_markup=menu.adm_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text=f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ', reply_markup=menu.adm_menu)


def remove_kur(message):
    id = message.text
    if id.isdigit() is False:
        id = id.replace('@', '')
        id = db.get_value('user_id', 'name', id, 'users')
    if db.get_value('*', 'user_id', id, 'users') is not None:
        db.remove_kur(id)
        bot.send_message(chat_id=message.chat.id, text=f'–£–¥–∞–ª–∏–ª –∫—É—Ä—å–µ—Ä–∞ {id}', reply_markup=menu.adm_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text=f'–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ', reply_markup=menu.adm_menu)


def check_balance(user_id, price, discount=0.0):
    balance = float(db.get_value('balance', 'user_id', user_id, 'users'))
    price = float(price) - float(price) / 100 * float(discount)

    if balance >= price:
        return 1
    else:
        return 0


def parent_list():
    list = []
    catalog = db.get_values("*", 'parent_catalog_id', 'catalog_id', 'catalog')
    for i in catalog:
        back = "parent" + str(i[0])
        list.append(back)
    return list


def catalog_list():
    list = []
    catalog = db.get_values_long(
        'select * from catalog where catalog_id not in (select catalog_id from catalog where parent_catalog_id=catalog_id)')
    for i in catalog:
        back = 'catalog' + str(i[0])
        list.append(back)
    return list


def product_list():
    list = []
    products = db.get_values('*', base='product')
    for i in products:
        back = 'product_' + str(i[0]) + '_' + str(i[1])
        list.append(back)
    return list


def buy_product_list():
    list = []
    products = db.get_values('*', base='product')
    for i in products:
        back = 'buyproduct_' + str(i[0]) + '_' + str(i[1])
        list.append(back)
    return list


class BuyProduct():
    def __init__(self, user_id):
        self.user_id = user_id
        self.product_id = None
        self.catalog_id = None
        self.price = None
        self.count = None
        self.count_max = None
        self.name = None

    def Info(self):
        print(f'{self.user_id}\n{self.product_id}\n{self.catalog_id}\n{self.price}\n{self.count}\n{self.count_max}')


# Admin menu shop settings
def set_money_value(message):
    value = message.text
    try:
        db.update_value('money_value', value)
        bot.send_message(chat_id=message.chat.id, text=f'–¢–µ–ø–µ—Ä—å –≤–∞–ª—é—Ç–∞ - {value}', reply_markup=menu.shop_config)
    except:
        pass


def set_info_message(message):
    value = message.text.format()
    try:
        db.update_value('info_message', value)
        bot.send_message(chat_id=message.chat.id, text=f'–¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ: \n{value}', reply_markup=menu.shop_config)
    except:
        pass


def set_ref_percent(message):
    if message.text.isdigit():
        value = message.text.format()
        try:
            db.update_value('referral_percent', value)
            bot.send_message(chat_id=message.chat.id, text=f'–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ü–µ–Ω—Ç: \n{value}', reply_markup=menu.shop_config)
        except:
            pass
    else:
        bot.send_message(chat_id=message.chat.id, text=f'–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!', reply_markup=menu.shop_config)


def add_parent_category(message, call, id):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.delete_message(chat_id=message.chat.id, message_id=id)

    if db.get_value('*', 'name', message.text, 'catalog') is None:
        max = db.get_value_long('select max(catalog_id) from catalog')
        if max is None or max == '0':
            max = 0
        conn, cursor = db.connect()
        cursor.execute(f'insert into catalog values({max + 1},"{message.text}",{max + 1})')
        conn.commit()
        cursor.close()
        conn.close()
        bot.answer_callback_query(callback_query_id=call.id, text=f'–î–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text}\n'
                                                                  f'ID - {max + 1}', show_alert=True)
    else:
        bot.answer_callback_query(callback_query_id=call.id, text=f'–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ –∏–º–µ–µ—Ç—Å—è!!!',
                                  show_alert=True)


def list_add_category():
    list = []
    parent = db.get_values_long('select * from catalog where catalog_id=parent_catalog_id')
    if len(parent) > 0:
        for i in parent:
            text = '@#!$' + i[1] + '_' + str(i[2])
            list.append(text)
    return list


def add_category(message, name, id, call_id, message_id):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    conn, cursor = db.connect()
    max = int(cursor.execute('select max(catalog_id) from catalog').fetchone()[0])
    if max is None or max == '0':
        max = 0
    cursor.execute('insert into catalog values(?,?,?)', (max + 1, message.text, id))
    conn.commit()
    cursor.close()
    conn.close()
    bot.answer_callback_query(callback_query_id=call_id, text=f'–î–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text} –≤ {name}!',
                              show_alert=True)


def list_add_sub_category():
    list = []
    parent = db.get_values_long('select * from catalog where catalog_id!=parent_catalog_id')
    if len(parent) > 0:
        for i in parent:
            text = '@@#@' + i[1] + '_' + str(i[0])
            list.append(text)
    return list


def add_sub_category(message, name, id, call_id, message_id):
    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    conn, cursor = db.connect()
    max = int(cursor.execute('select max(catalog_id) from catalog').fetchone()[0])
    if max is None or max == '0':
        max = 0
    cursor.execute('insert into catalog values(?,?,?)', (max + 1, message.text, id))
    conn.commit()
    cursor.close()
    conn.close()
    bot.answer_callback_query(callback_query_id=call_id, text=f'–î–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é {message.text} –≤ {name}!',
                              show_alert=True)


def list_add_product_to_category():
    list = []
    parent = db.get_values_long('select * from catalog where catalog_id!=parent_catalog_id')
    if len(parent) > 0:
        for i in parent:
            text = '&&@#' + i[1] + '_' + str(i[0])
            list.append(text)
    return list


def list_add_product_to_category_kur():
    list = []
    parent = db.get_values_long('select * from catalog where catalog_id!=parent_catalog_id')
    if len(parent) > 0:
        for i in parent:
            text = '&&@#' + i[1] + '_' + str(i[0])
            list.append(text)
    return list


class Add_Product():
    message_id = None  # id —Å–º—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    product_id = None  # –ø—Ä–æ–¥—É–∫—Ç –∞–π–¥–∏ –∏–∑ –±–¥
    catalog_id = None  # –∞–π–¥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    name = None  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    call_id = None  # –∫–æ–ª–ª –¥–ª—è —Å–º—Å
    descriptions = None  # –æ–ø–∏—Å–∞–Ω–∏–µ
    cost = None  # —Ü–µ–Ω–∞


def list_of_add_product():
    list = []
    products = db.get_values('*', base='product')
    for i in products:
        back = '~~#@' + i[2] + '_' + str(i[0])
        list.append(back)

    return list


class Add_Product_kur():
    message_id = None  # id —Å–º—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    product_id = None  # –ø—Ä–æ–¥—É–∫—Ç –∞–π–¥–∏ –∏–∑ –±–¥
    catalog_id = None  # –∞–π–¥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
    name = None  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    call_id = None  # –∫–æ–ª–ª –¥–ª—è —Å–º—Å
    descriptions = None  # –æ–ø–∏—Å–∞–Ω–∏–µ
    cost = None  # —Ü–µ–Ω–∞


def list_of_add_product_kur():
    list = []
    products = db.get_values('*', base='product')
    for i in products:
        back = '~~#@' + i[2] + '_' + str(i[0])
        list.append(back)

    return list


def add_product(message, id):
    conn, cursor = db.connect()
    max = int(db.get_value_long('select max(person_id) from address'))
    if max is None or max == '0':
        max = 1

    for tovar in message.text.split("\n"):
        if tovar != '':
            max += 1
            cursor.execute('insert into address values(?,?,?,?)', (tovar, id, max, message.chat.id))

    conn.commit()
    cursor.close()
    conn.close()
    bot.send_message(chat_id=message.chat.id, text='–î–æ–±–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –∫ —Ç–æ–≤–∞—Ä—É!', reply_markup=menu.adm_menu)
    bot.send_message(chat_id=config.CHAT_GROUP_ID, text='‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ø–æ–ª–Ω–∏–ª–æ—Å—å ')

def del_category(message):
    conn, cursor = db.connect()
    try:
        id = message.text
        categories = db.get_values("catalog_id", base="catalog")
        if id in categories:
            cursor.execute('delete from catalog where catalog_id = ?', (id,))
            conn.commit()
            bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–æ!", reply_to_message_id=message.message_id)
        else:
            bot.send_message(message.chat.id, "id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!!", reply_to_message_id=message.message_id)
    except Exception as e:
        print(e)
    finally:
        cursor.close()
        conn.close()


def list_del_category():
    return ['@dc' + str(i[0]) for i in db.get_categories_subcategories()]


def list_del_product():
    return ['@dp' + str(i[0]) for i in db.get_products()]