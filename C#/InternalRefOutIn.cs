using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Study_CSharp_Design.OOP.Incapsulation
{
    internal class Internal
    {
        // internal - (класс, метод, поле) которое доступно в текущей сборке, но не доступно во внешних сборках
        // ref - если указать при аргументе в метод и при передаче объекта при вызове метода, то изменится именно тот объект, который передаем
        // out - параметр передается по ссылке + фишка с делегатами
        // in : 
        // - параметр универсального типа
        // - передача аргумента методу по ссылке
        // - foreach
        // - from и join в LINQ

        /*
         * Ключевое слово out можно использовать в двух контекстах: 
         * - В качестве модификатора параметра, который позволяет передавать аргумент в метод по ссылке, а не по значению. 
         * - В объявлениях параметров универсального типа для интерфейсов и делегатов, что указывает, что параметр типа является ковариантным.
         */

        /*
         * Ковариантностью называется сохранение иерархии наследования исходных типов в производных типах в том же порядке. 
         * Так, если класс Cat наследуется от класса Animal, то естественно полагать, 
         * что перечисление IEnumerable<Cat> будет потомком перечисления IEnumerable<Animal>. 
         * Действительно, «список из пяти кошек» — это частный случай «списка из пяти животных». 
         * В таком случае говорят, что тип (в данном случае обобщённый интерфейс) IEnumerable<T> ковариантен своему параметру-типу T.
         * 
         * Контравариантностью называется обращение иерархии исходных типов на противоположную в производных типах. 
         * Так, если класс String наследуется от класса Object, а делегат Action<T> определён как метод, принимающий объект типа T, 
         * то Action<Object> наследуется от делегата Action<String>, а не наоборот. 
         * Действительно, если «все строки — объекты», то «всякий метод, оперирующий произвольными объектами, 
         * может выполнить операцию над строкой», но не наоборот. 
         * В таком случае говорят, что тип (в данном случае обобщённый делегат) Action<T> контравариантен своему параметру-типу T.
         */
    }
}
